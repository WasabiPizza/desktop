[   0.005][v][cplayer] mpv 0.33.1 Copyright Â© 2000-2020 mpv/MPlayer/mplayer2 projects
[   0.005][v][cplayer]  built on Mon Apr  5 16:57:51 UTC 2021
[   0.005][v][cplayer] FFmpeg library versions:
[   0.005][v][cplayer]    libavutil       56.51.100 (runtime 56.70.100)
[   0.005][v][cplayer]    libavcodec      58.91.100 (runtime 58.134.100)
[   0.005][v][cplayer]    libavformat     58.45.100 (runtime 58.76.100)
[   0.005][v][cplayer]    libswscale      5.7.100 (runtime 5.9.100)
[   0.005][v][cplayer]    libavfilter     7.85.100 (runtime 7.110.100)
[   0.005][v][cplayer]    libswresample   3.7.100 (runtime 3.9.100)
[   0.005][v][cplayer] FFmpeg version: 4.4
[   0.005][v][cplayer] 
[   0.005][v][cplayer] Configuration: waf configure --prefix=/usr --libdir=/usr/lib64 --confdir=/etc/mpv --docdir=/usr/share/examples/mpv --enable-cdda --enable-dvbin --enable-dvdnav --enable-libarchive --enable-libmpv-shared --enable-cplugins --enable-alsa --disable-caca --enable-jack --enable-lcms2 --enable-lua --disable-openal --enable-pulse --disable-sdl2 --disable-vapoursynth --enable-vdpau --enable-vulkan --enable-shaderc --enable-wayland --enable-x11 --zshdir=/usr/share/zsh/site-functions
[   0.005][v][cplayer] List of enabled features: 52 alsa asm build-date cdda cplayer cplugins debug-build drm dvbin dvdnav egl egl-drm egl-helpers egl-x11 ffmpeg gbm gbm.h gl gl-wayland glibc-thread-name glob glob-posix gpl iconv jack jpeg lcms2 libarchive libass libavdevice libbluray libdl libm libmpv-shared libplacebo librt linux-fstatfs linux-input-event-codes lua memfd_create optimize plain-gl posix posix-or-mingw pthreads pulse rubberband shaderc shaderc-shared stdatomic uchardet vaapi vaapi-drm vaapi-egl vaapi-vulkan vaapi-wayland vaapi-x-egl vaapi-x11 vdpau vt.h vulkan wayland wayland-protocols x11 xv zlib
[   0.005][d][osc] Loading lua script @osc.lua...
[   0.005][d][ytdl_hook] Loading lua script @ytdl_hook.lua...
[   0.005][d][stats] Loading lua script @stats.lua...
[   0.005][d][console] Loading lua script @console.lua...
[   0.005][d][auto_profiles] Loading lua script @auto_profiles.lua...
[   0.005][d][global] config path: 'scripts' -/-> '/home/nero/.config/mpv/scripts'
[   0.005][d][global] config path: 'scripts' -/-> '/home/nero/.mpv/scripts'
[   0.005][d][global] config path: 'scripts' -/-> '/etc/mpv/scripts'
[   0.005][v][cplayer] Waiting for scripts...
[   0.005][d][osc] loading mp.defaults
[   0.006][d][ytdl_hook] loading mp.defaults
[   0.006][d][stats] loading mp.defaults
[   0.006][d][auto_profiles] loading mp.defaults
[   0.007][d][ytdl_hook] loading @ytdl_hook.lua
[   0.007][d][stats] loading @stats.lua
[   0.007][d][osc] loading @osc.lua
[   0.008][d][auto_profiles] loading @auto_profiles.lua
[   0.009][d][console] loading mp.defaults
[   0.010][d][auto_profiles] Exiting...
[   0.010][d][ytdl_hook] reading options for ytdl_hook 
[   0.010][d][global] config path: 'script-opts/ytdl_hook.conf' -/-> '/home/nero/.config/mpv/script-opts/ytdl_hook.conf'
[   0.010][d][global] config path: 'script-opts/ytdl_hook.conf' -/-> '/home/nero/.mpv/script-opts/ytdl_hook.conf'
[   0.010][d][global] config path: 'script-opts/ytdl_hook.conf' -/-> '/etc/mpv/script-opts/ytdl_hook.conf'
[   0.010][d][ytdl_hook] script-opts/ytdl_hook.conf not found. 
[   0.010][d][global] config path: 'lua-settings/ytdl_hook.conf' -/-> '/home/nero/.config/mpv/lua-settings/ytdl_hook.conf'
[   0.010][d][global] config path: 'lua-settings/ytdl_hook.conf' -/-> '/home/nero/.mpv/lua-settings/ytdl_hook.conf'
[   0.010][d][global] config path: 'lua-settings/ytdl_hook.conf' -/-> '/etc/mpv/lua-settings/ytdl_hook.conf'
[   0.010][d][ytdl_hook] lua-settings/ytdl_hook.conf not found. 
[   0.010][d][console] loading @console.lua
[   0.010][d][stats] reading options for stats 
[   0.010][d][global] config path: 'script-opts/stats.conf' -/-> '/home/nero/.config/mpv/script-opts/stats.conf'
[   0.010][d][global] config path: 'script-opts/stats.conf' -/-> '/home/nero/.mpv/script-opts/stats.conf'
[   0.010][d][global] config path: 'script-opts/stats.conf' -/-> '/etc/mpv/script-opts/stats.conf'
[   0.010][d][stats] script-opts/stats.conf not found. 
[   0.010][d][global] config path: 'lua-settings/stats.conf' -/-> '/home/nero/.config/mpv/lua-settings/stats.conf'
[   0.010][d][global] config path: 'lua-settings/stats.conf' -/-> '/home/nero/.mpv/lua-settings/stats.conf'
[   0.010][d][global] config path: 'lua-settings/stats.conf' -/-> '/etc/mpv/lua-settings/stats.conf'
[   0.010][d][stats] lua-settings/stats.conf not found. 
[   0.012][d][console] reading options for console 
[   0.012][d][global] config path: 'script-opts/console.conf' -/-> '/home/nero/.config/mpv/script-opts/console.conf'
[   0.012][d][global] config path: 'script-opts/console.conf' -/-> '/home/nero/.mpv/script-opts/console.conf'
[   0.012][d][global] config path: 'script-opts/console.conf' -/-> '/etc/mpv/script-opts/console.conf'
[   0.012][d][console] script-opts/console.conf not found. 
[   0.012][d][global] config path: 'lua-settings/console.conf' -/-> '/home/nero/.config/mpv/lua-settings/console.conf'
[   0.012][d][global] config path: 'lua-settings/console.conf' -/-> '/home/nero/.mpv/lua-settings/console.conf'
[   0.012][d][global] config path: 'lua-settings/console.conf' -/-> '/etc/mpv/lua-settings/console.conf'
[   0.012][d][console] lua-settings/console.conf not found. 
[   0.012][d][cplayer] Run command: define-section, flags=64, args=[name="input_stats", contents="i script-binding stats/display-stats\nI script-binding stats/display-stats-toggle\n", flags="default"]
[   0.012][d][cplayer] Run command: enable-section, flags=64, args=[name="input_stats", flags="allow-hide-cursor+allow-vo-dragging"]
[   0.012][d][cplayer] Run command: define-section, flags=64, args=[name="input_forced_stats", contents="", flags="force"]
[   0.012][d][osc] reading options for osc 
[   0.012][d][global] config path: 'script-opts/osc.conf' -/-> '/home/nero/.config/mpv/script-opts/osc.conf'
[   0.012][d][cplayer] Run command: enable-section, flags=64, args=[name="input_forced_stats", flags="allow-hide-cursor+allow-vo-dragging"]
[   0.012][d][global] config path: 'script-opts/osc.conf' -/-> '/home/nero/.mpv/script-opts/osc.conf'
[   0.012][d][global] config path: 'script-opts/osc.conf' -/-> '/etc/mpv/script-opts/osc.conf'
[   0.012][d][osc] script-opts/osc.conf not found. 
[   0.012][d][global] config path: 'lua-settings/osc.conf' -/-> '/home/nero/.config/mpv/lua-settings/osc.conf'
[   0.012][d][global] config path: 'lua-settings/osc.conf' -/-> '/home/nero/.mpv/lua-settings/osc.conf'
[   0.012][d][global] config path: 'lua-settings/osc.conf' -/-> '/etc/mpv/lua-settings/osc.conf'
[   0.012][d][osc] lua-settings/osc.conf not found. 
[   0.012][d][global] config path: 'fonts' -/-> '/home/nero/.config/mpv/fonts'
[   0.012][d][global] config path: 'fonts' -/-> '/home/nero/.mpv/fonts'
[   0.012][d][global] config path: 'fonts' -/-> '/etc/mpv/fonts'
[   0.012][d][osd/libass] ASS library version: 0x1500000 (runtime 0x1502000)
[   0.012][v][osd/libass] libass API version: 0x1502000
[   0.012][v][osd/libass] libass source: tarball: 0.15.2
[   0.012][v][osd/libass] Shaper: FriBidi 1.0.10 (SIMPLE) HarfBuzz-ng 2.9.1 (COMPLEX)
[   0.012][d][global] config path: 'subfont.ttf' -/-> '/home/nero/.config/mpv/subfont.ttf'
[   0.012][d][global] config path: 'subfont.ttf' -/-> '/home/nero/.mpv/subfont.ttf'
[   0.012][d][global] config path: 'subfont.ttf' -/-> '/etc/mpv/subfont.ttf'
[   0.012][d][global] config path: 'fonts.conf' -/-> '/home/nero/.config/mpv/fonts.conf'
[   0.012][d][global] config path: 'fonts.conf' -/-> '/home/nero/.mpv/fonts.conf'
[   0.012][d][global] config path: 'fonts.conf' -/-> '/etc/mpv/fonts.conf'
[   0.012][v][osd/libass] Setting up fonts...
[   0.017][v][osd/libass] Using font provider fontconfig
[   0.017][v][osd/libass] Done.
[   0.017][d][cplayer] Run command: define-section, flags=64, args=[name="showhide", contents="mouse_move script-binding osc/__keybinding1\nmouse_leave script-binding osc/__keybinding2\n", flags="force"]
[   0.017][d][cplayer] Run command: define-section, flags=64, args=[name="showhide_wc", contents="mouse_move script-binding osc/__keybinding3\nmouse_leave script-binding osc/__keybinding4\n", flags="force"]
[   0.017][d][cplayer] Run command: enable-section, flags=64, args=[name="showhide", flags="allow-hide-cursor+allow-vo-dragging"]
[   0.017][d][cplayer] Run command: enable-section, flags=64, args=[name="showhide_wc", flags="allow-hide-cursor+allow-vo-dragging"]
[   0.017][d][cplayer] Run command: define-section, flags=64, args=[name="input", contents="mbtn_left script-binding osc/__keybinding5\nshift+mbtn_left script-binding osc/__keybinding6\nmbtn_right script-binding osc/__keybinding7\nmbtn_mid script-binding osc/__keybinding8\nwheel_up script-binding osc/__keybinding9\nwheel_down script-binding osc/__keybinding10\nmbtn_left_dbl ignore\nshift+mbtn_left_dbl ignore\nmbtn_right_dbl ignore\n", flags="force"]
[   0.017][d][cplayer] Run command: enable-section, flags=64, args=[name="input", flags=""]
[   0.018][d][cplayer] Run command: define-section, flags=64, args=[name="window-controls", contents="mbtn_left script-binding osc/__keybinding11\n", flags="force"]
[   0.018][d][cplayer] Run command: enable-section, flags=64, args=[name="window-controls", flags=""]
[   0.018][d][cplayer] Run command: define-section, flags=64, args=[name="input_console", contents="", flags="default"]
[   0.018][d][cplayer] Run command: enable-section, flags=64, args=[name="input_console", flags="allow-hide-cursor+allow-vo-dragging"]
[   0.018][d][cplayer] Run command: define-section, flags=64, args=[name="input_forced_console", contents="", flags="force"]
[   0.018][d][cplayer] Run command: enable-section, flags=64, args=[name="input_forced_console", flags="allow-hide-cursor+allow-vo-dragging"]
[   0.018][d][cplayer] Run command: disable-section, flags=64, args=[name="input"]
[   0.018][d][cplayer] Run command: disable-section, flags=64, args=[name="window-controls"]
[   0.018][d][cplayer] Run command: change-list, flags=64, args=[name="shared-script-properties", operation="append", value="osc-margins=0.000000,0.000000,0.000000,0.000000"]
[   0.018][v][cplayer] Set property: shared-script-properties -> 1
[   0.018][v][cplayer] Done loading scripts.
[   0.018][d][global] config path: 'watch_later' -> '/home/nero/.config/mpv/watch_later'
[   0.018][i][cplayer] Resuming playback. This behavior can be disabled with --no-resume-playback.
[   0.018][v][cplayer] Loading config '/home/nero/.config/mpv/watch_later/C2725DBBBB977F1A79985FEAE9ADC152'
[   0.018][v][cplayer] Reading config file /home/nero/.config/mpv/watch_later/C2725DBBBB977F1A79985FEAE9ADC152
[   0.018][v][cplayer] Applying profile 'default'...
[   0.018][v][cplayer] Setting option 'start' = '0.000000' (flags = 36)
[   0.018][v][cplayer] Setting option 'pause' = 'yes' (flags = 36)
[   0.018][v][cplayer] Setting option 'sid' = 'no' (flags = 36)
[   0.018][v][cplayer] Running hook: ytdl_hook/on_load
[   0.018][v][ytdl_hook] ytdl:// hook 
[   0.018][v][ytdl_hook] not a ytdl:// url 
[   0.018][d][osc] osc_init 
[   0.019][v][ifo_dvdnav] Opening /home/nero/Downloads/Swing.Girls.2004.1080p.BluRay.x264-SSF/ssf-sg1080.mkv
[   0.019][v][bdmv/bluray] Opening /home/nero/Downloads/Swing.Girls.2004.1080p.BluRay.x264-SSF/ssf-sg1080.mkv
[   0.019][v][file] Opening /home/nero/Downloads/Swing.Girls.2004.1080p.BluRay.x264-SSF/ssf-sg1080.mkv
[   0.019][d][file] resize stream to 131072 bytes, drop 0 bytes
[   0.019][d][file] Stream opened successfully.
[   0.019][v][demux] Trying demuxers for level=normal.
[   0.019][d][demux] Trying demuxer: disc (force-level: normal)
[   0.019][d][demux] Trying demuxer: edl (force-level: normal)
[   0.019][d][demux] Trying demuxer: cue (force-level: normal)
[   0.019][d][demux] Trying demuxer: rawaudio (force-level: normal)
[   0.019][d][demux] Trying demuxer: rawvideo (force-level: normal)
[   0.019][d][demux] Trying demuxer: mkv (force-level: normal)
[   0.019][d][mkv] Found the head...
[   0.019][d][mkv] + a segment...
[   0.019][d][mkv] Parsing seek head...
[   0.019][d][mkv] |+ segment information...
[   0.019][d][mkv] float 6287296.000000
[   0.019][d][mkv] | + muxing app: libebml v0.8.0 + libmatroska v0.9.0
[   0.019][d][mkv] | + writing app: mkvmerge v3.3.0 ('Language') ç¼è¯äº Mar 24 2010 14:59:24
[   0.019][d][mkv] | + timecode scale: 1000000
[   0.019][d][mkv] | + duration: 6287.296s
[   0.019][d][mkv] | + segment uid 97 fb 2e 7f 13 c8 5b b6 ac f8 d3 69 b3 fd 49 55
[   0.019][d][mkv] |+ segment tracks...
[   0.019][d][mkv] float 1.000000
[   0.019][d][mkv] float 1.000000
[   0.019][d][mkv] float 48000.000000
[   0.019][d][mkv] float 1.000000
[   0.019][d][mkv] | + a track...
[   0.019][d][mkv] |  + Track number: 1
[   0.019][d][mkv] |  + Track type: Video
[   0.019][d][mkv] |  + Video track
[   0.019][d][mkv] |   + Display width: 80
[   0.019][d][mkv] |   + Display height: 43
[   0.019][d][mkv] |   + Pixel width: 1920
[   0.019][d][mkv] |   + Pixel height: 1032
[   0.019][d][mkv] |  + Codec ID: V_MPEG4/ISO/AVC
[   0.019][d][mkv] |  + CodecPrivate, length 42
[   0.019][d][mkv] |  + Language: eng
[   0.019][d][mkv] |  + Default flag: 0
[   0.019][d][mkv] |  + Forced flag: 0
[   0.019][d][mkv] |  + Default duration: 41.708ms ( = 23.976 fps)
[   0.019][d][mkv] | + a track...
[   0.019][d][mkv] |  + Track number: 2
[   0.019][d][mkv] |  + Track type: Audio
[   0.019][d][mkv] |  + Audio track
[   0.019][d][mkv] |   + Sampling frequency: 48000.000000
[   0.019][d][mkv] |   + Channels: 6
[   0.019][d][mkv] |  + Codec ID: A_AC3
[   0.019][d][mkv] |  + Language: jpn
[   0.019][d][mkv] |  + Default flag: 1
[   0.019][d][mkv] |  + Forced flag: 0
[   0.019][d][mkv] |  + Default duration: 32.000ms ( = 31.250 fps)
[   0.019][d][mkv] | + a track...
[   0.019][d][mkv] |  + Track number: 3
[   0.019][d][mkv] |  + Track type: Subtitle
[   0.019][d][mkv] |  + Codec ID: S_TEXT/UTF8
[   0.019][d][mkv] |  + Language: eng
[   0.019][d][mkv] |  + Default flag: 1
[   0.019][d][mkv] |  + Forced flag: 0
[   0.019][d][mkv] |+ found cluster
[   0.019][v][mkv] Seeking to 8530688904 to read header element 0x1c53bb6b.
[   0.019][v][file] stream level seek from 131072 to 8530688904
[   0.019][d][cplayer] Run command: change-list, flags=64, args=[name="shared-script-properties", operation="append", value="osc-margins=0.000000,0.000000,0.000000,0.000000"]
[   0.019][v][mkv] Parsing cues...
[   0.019][v][cplayer] Set property: shared-script-properties -> 1
[   0.019][d][global] config path: 'fonts' -/-> '/home/nero/.config/mpv/fonts'
[   0.019][d][global] config path: 'fonts' -/-> '/home/nero/.mpv/fonts'
[   0.019][d][global] config path: 'fonts' -/-> '/etc/mpv/fonts'
[   0.019][d][osd/libass] ASS library version: 0x1500000 (runtime 0x1502000)
[   0.019][v][osd/libass] libass API version: 0x1502000
[   0.019][v][osd/libass] libass source: tarball: 0.15.2
[   0.019][v][osd/libass] Shaper: FriBidi 1.0.10 (SIMPLE) HarfBuzz-ng 2.9.1 (COMPLEX)
[   0.019][d][global] config path: 'subfont.ttf' -/-> '/home/nero/.config/mpv/subfont.ttf'
[   0.019][d][global] config path: 'subfont.ttf' -/-> '/home/nero/.mpv/subfont.ttf'
[   0.019][d][global] config path: 'subfont.ttf' -/-> '/etc/mpv/subfont.ttf'
[   0.019][d][global] config path: 'fonts.conf' -/-> '/home/nero/.config/mpv/fonts.conf'
[   0.019][d][global] config path: 'fonts.conf' -/-> '/home/nero/.mpv/fonts.conf'
[   0.019][d][global] config path: 'fonts.conf' -/-> '/etc/mpv/fonts.conf'
[   0.019][v][osd/libass] Setting up fonts...
[   0.020][v][mkv] Seeking to 8530707132 to read header element 0x114d9b74.
[   0.020][d][mkv] Parsing seek head...
[   0.020][v][file] stream level seek from 8530803911 to 5608
[   0.020][v][mkv] All headers are parsed!
[   0.021][v][demux] Detected file format: Matroska
[   0.021][v][cplayer] Opening done: /home/nero/Downloads/Swing.Girls.2004.1080p.BluRay.x264-SSF/ssf-sg1080.mkv
[   0.024][v][osd/libass] Using font provider fontconfig
[   0.024][v][osd/libass] Done.
[   0.024][v][find_files] Loading external files in /home/nero/Downloads/Swing.Girls.2004.1080p.BluRay.x264-SSF/
[   0.024][d][global] config path: 'sub' -/-> '/home/nero/.config/mpv/sub'
[   0.024][d][global] config path: 'sub' -/-> '/home/nero/.mpv/sub'
[   0.024][d][global] config path: 'sub' -/-> '/etc/mpv/sub'
[   0.024][d][cplayer] Run command: define-section, flags=64, args=[name="input_osc", contents="", flags="default"]
[   0.024][v][cplayer] Running hook: ytdl_hook/on_preloaded
[   0.024][d][cplayer] Run command: enable-section, flags=64, args=[name="input_osc", flags="allow-hide-cursor+allow-vo-dragging"]
[   0.024][d][cplayer] Run command: define-section, flags=64, args=[name="input_forced_osc", contents="", flags="force"]
[   0.024][v][mkv] select track 0
[   0.024][v][mkv] select track 1
[   0.024][i][cplayer]  (+) Video --vid=1 (h264 1920x1032 23.976fps)
[   0.024][i][cplayer]  (+) Audio --aid=1 --alang=jpn (*) (ac3 6ch 48000Hz)
[   0.024][i][cplayer]      Subs  --sid=1 --slang=eng (*) (subrip)
[   0.025][v][vo/gpu/opengl] Initializing GPU context 'wayland'
[   0.025][v][vo/gpu/wayland] Registered for protocol wl_shm
[   0.025][v][vo/gpu/wayland] Registered for protocol wl_compositor
[   0.025][v][vo/gpu/wayland] Registered for protocol wl_data_device_manager
[   0.025][v][vo/gpu/wayland] Registered for protocol zwp_idle_inhibit_manager_v1
[   0.025][v][vo/gpu/wayland] Registered for protocol xdg_wm_base
[   0.025][v][vo/gpu/wayland] Registered for protocol zxdg_decoration_manager_v1
[   0.025][v][vo/gpu/wayland] Registered for protocol wp_presentation
[   0.025][v][vo/gpu/wayland] Registered for protocol wl_seat
[   0.025][v][vo/gpu/wayland] Registered for protocol wl_output
[   0.025][v][vo/gpu/wayland] Registered for protocol wl_output
[   0.025][v][vo/gpu/wayland] Registered for protocol wl_output
[   0.025][v][vo/gpu/wayland] Enabling server decorations
[   0.099][v][vo/gpu/opengl] EGL_VERSION=1.5
[   0.099][v][vo/gpu/opengl] EGL_VENDOR=Mesa Project
[   0.099][v][vo/gpu/opengl] EGL_CLIENT_APIS=OpenGL OpenGL_ES 
[   0.099][v][vo/gpu/opengl] Trying to create Desktop OpenGL context.
[   0.099][d][vo/gpu/opengl] Chosen EGLConfig:
[   0.099][d][vo/gpu/opengl]   EGL_CONFIG_ID=0x11
[   0.099][d][vo/gpu/opengl]   EGL_RED_SIZE=0xa
[   0.099][d][vo/gpu/opengl]   EGL_GREEN_SIZE=0xa
[   0.099][d][vo/gpu/opengl]   EGL_BLUE_SIZE=0xa
[   0.099][d][vo/gpu/opengl]   EGL_ALPHA_SIZE=0x0
[   0.099][d][vo/gpu/opengl]   EGL_COLOR_BUFFER_TYPE=0x308e
[   0.099][d][vo/gpu/opengl]   EGL_CONFIG_CAVEAT=0x3038
[   0.099][d][vo/gpu/opengl]   EGL_CONFORMANT=0x4d
[   0.099][d][vo/gpu/opengl]   EGL_NATIVE_VISUAL_ID=0x0
[   0.100][v][vo/gpu/wayland] GL_VERSION='4.6 (Core Profile) Mesa 21.2.5'
[   0.100][v][vo/gpu/wayland] Detected desktop OpenGL 4.6.
[   0.100][v][vo/gpu/wayland] GL_VENDOR='AMD'
[   0.100][v][vo/gpu/wayland] GL_RENDERER='AMD Radeon (TM) R9 380 Series (TONGA, DRM 3.41.0, 5.13.19_1, LLVM 12.0.1)'
[   0.100][v][vo/gpu/wayland] GL_SHADING_LANGUAGE_VERSION='4.60'
[   0.101][d][vo/gpu/wayland] Combined OpenGL extensions string:
[   0.101][d][vo/gpu/wayland] EGL_ANDROID_blob_cache EGL_ANDROID_native_fence_sync EGL_EXT_buffer_age EGL_EXT_create_context_robustness EGL_EXT_image_dma_buf_import EGL_EXT_image_dma_buf_import_modifiers EGL_EXT_swap_buffers_with_damage EGL_KHR_cl_event2 EGL_KHR_config_attribs EGL_KHR_create_context EGL_KHR_create_context_no_error EGL_KHR_fence_sync EGL_KHR_get_all_proc_addresses EGL_KHR_gl_colorspace EGL_KHR_gl_renderbuffer_image EGL_KHR_gl_texture_2D_image EGL_KHR_gl_texture_3D_image EGL_KHR_gl_texture_cubemap_image EGL_KHR_image_base EGL_KHR_no_config_context EGL_KHR_reusable_sync EGL_KHR_surfaceless_context EGL_KHR_swap_buffers_with_damage EGL_EXT_pixel_format_float EGL_KHR_wait_sync EGL_MESA_configless_context EGL_MESA_drm_image EGL_MESA_image_dma_buf_export EGL_MESA_query_driver EGL_WL_bind_wayland_display EGL_WL_create_wayland_buffer_from_image  GL_AMD_conservative_depth GL_AMD_depth_clamp_separate GL_AMD_draw_buffers_blend GL_AMD_framebuffer_multisample_advanced GL_AMD_gpu_shader_int64 GL_AMD_multi_draw_indirect GL_AMD_performance_monitor GL_AMD_pinned_memory GL_AMD_query_buffer_object GL_AMD_seamless_cubemap_per_texture GL_AMD_shader_stencil_export GL_AMD_shader_trinary_minmax GL_AMD_texture_texture4 GL_AMD_vertex_shader_layer GL_AMD_vertex_shader_viewport_index GL_ANGLE_texture_compression_dxt3 GL_ANGLE_texture_compression_dxt5 GL_ARB_ES2_compatibility GL_ARB_ES3_1_compatibility GL_ARB_ES3_2_compatibility GL_ARB_ES3_compatibility GL_ARB_arrays_of_arrays GL_ARB_base_instance GL_ARB_bindless_texture GL_ARB_blend_func_extended GL_ARB_buffer_storage GL_ARB_clear_buffer_object GL_ARB_clear_texture GL_ARB_clip_control GL_ARB_color_buffer_float GL_ARB_compressed_texture_pixel_storage GL_ARB_compute_shader GL_ARB_compute_variable_group_size GL_ARB_conditional_render_inverted GL_ARB_conservative_depth GL_ARB_copy_buffer GL_ARB_copy_image GL_ARB_cull_distance GL_ARB_debug_output GL_ARB_depth_buffer_float GL_ARB_depth_clamp GL_ARB_derivative_control GL_ARB_direct_state_access GL_ARB_draw_buffers GL_ARB_draw_buffers_blend GL_ARB_draw_elements_base_vertex GL_ARB_draw_indirect GL_ARB_draw_instanced GL_ARB_enhanced_layouts GL_ARB_explicit_attrib_location GL_ARB_explicit_uniform_location GL_ARB_fragment_coord_conventions GL_ARB_fragment_layer_viewport GL_ARB_fragment_shader GL_ARB_framebuffer_no_attachments GL_ARB_framebuffer_object GL_ARB_framebuffer_sRGB GL_ARB_get_program_binary GL_ARB_get_texture_sub_image GL_ARB_gl_spirv GL_ARB_gpu_shader5 GL_ARB_gpu_shader_fp64 GL_ARB_gpu_shader_int64 GL_ARB_half_float_pixel GL_ARB_half_float_vertex GL_ARB_indirect_parameters GL_ARB_instanced_arrays GL_ARB_internalformat_query GL_ARB_internalformat_query2 GL_ARB_invalidate_subdata GL_ARB_map_buffer_alignment GL_ARB_map_buffer_range GL_ARB_multi_bind GL_ARB_multi_draw_indirect GL_ARB_occlusion_query2 GL_ARB_parallel_shader_compile GL_ARB_pipeline_statistics_query GL_ARB_pixel_buffer_object GL_ARB_point_sprite GL_ARB_polygon_offset_clamp GL_ARB_program_interface_query GL_ARB_provoking_vertex GL_ARB_query_buffer_object GL_ARB_robust_buffer_access_behavior GL_ARB_robustness GL_ARB_sample_shading GL_ARB_sampler_objects GL_ARB_seamless_cube_map GL_ARB_seamless_cubemap_per_texture GL_ARB_separate_shader_objects GL_ARB_shader_atomic_counter_ops GL_ARB_shader_atomic_counters GL_ARB_shader_ballot GL_ARB_shader_bit_encoding GL_ARB_shader_clock GL_ARB_shader_draw_parameters GL_ARB_shader_group_vote GL_ARB_shader_image_load_store GL_ARB_shader_image_size GL_ARB_shader_objects GL_ARB_shader_precision GL_ARB_shader_stencil_export GL_ARB_shader_storage_buffer_object GL_ARB_shader_subroutine GL_ARB_shader_texture_image_samples GL_ARB_shader_texture_lod GL_ARB_shader_viewport_layer_array GL_ARB_shading_language_420pack GL_ARB_shading_language_include GL_ARB_shading_language_packing GL_ARB_spirv_extensions GL_ARB_stencil_texturing GL_ARB_sync GL_ARB_tessellation_shader GL_ARB_texture_barrier GL_ARB_texture_buffer_object GL_ARB_texture_buffer_object_rgb32 GL_ARB_texture_buffer_range GL_ARB_texture_compression_bptc GL_ARB_texture_compression_rgtc GL_ARB_texture_cube_map_array GL_ARB_texture_filter_anisotropic GL_ARB_texture_float GL_ARB_texture_gather GL_ARB_texture_mirror_clamp_to_edge GL_ARB_texture_multisample GL_ARB_texture_non_power_of_two GL_ARB_texture_query_levels GL_ARB_texture_query_lod GL_ARB_texture_rectangle GL_ARB_texture_rg GL_ARB_texture_rgb10_a2ui GL_ARB_texture_stencil8 GL_ARB_texture_storage GL_ARB_texture_storage_multisample GL_ARB_texture_swizzle GL_ARB_texture_view GL_ARB_timer_query GL_ARB_transform_feedback2 GL_ARB_transform_feedback3 GL_ARB_transform_feedback_instanced GL_ARB_transform_feedback_overflow_query GL_ARB_uniform_buffer_object GL_ARB_vertex_array_bgra GL_ARB_vertex_array_object GL_ARB_vertex_attrib_64bit GL_ARB_vertex_attrib_binding GL_ARB_vertex_buffer_object GL_ARB_vertex_shader GL_ARB_vertex_type_10f_11f_11f_rev GL_ARB_vertex_type_2_10_10_10_rev GL_ARB_viewport_array GL_ATI_blend_equation_separate GL_ATI_meminfo GL_ATI_texture_float GL_ATI_texture_mirror_once GL_EXT_EGL_image_storage GL_EXT_EGL_sync GL_EXT_abgr GL_EXT_blend_equation_separate GL_EXT_demote_to_helper_invocation GL_EXT_depth_bounds_test GL_EXT_draw_buffers2 GL_EXT_draw_instanced GL_EXT_framebuffer_blit GL_EXT_framebuffer_multisample GL_EXT_framebuffer_multisample_blit_scaled GL_EXT_framebuffer_object GL_EXT_framebuffer_sRGB GL_EXT_memory_object GL_EXT_memory_object_fd GL_EXT_packed_depth_stencil GL_EXT_packed_float GL_EXT_pixel_buffer_object GL_EXT_polygon_offset_clamp GL_EXT_provoking_vertex GL_EXT_semaphore GL_EXT_semaphore_fd GL_EXT_shader_image_load_formatted GL_EXT_shader_image_load_store GL_EXT_shader_integer_mix GL_EXT_shader_samples_identical GL_EXT_texture_array GL_EXT_texture_compression_dxt1 GL_EXT_texture_compression_rgtc GL_EXT_texture_compression_s3tc GL_EXT_texture_filter_anisotropic GL_EXT_texture_integer GL_EXT_texture_mirror_clamp GL_EXT_texture_sRGB GL_EXT_texture_sRGB_R8 GL_EXT_texture_sRGB_decode GL_EXT_texture_shadow_lod GL_EXT_texture_shared_exponent GL_EXT_texture_snorm GL_EXT_texture_swizzle GL_EXT_timer_query GL_EXT_transform_feedback GL_EXT_vertex_array_bgra GL_EXT_vertex_attrib_64bit GL_EXT_window_rectangles GL_IBM_multimode_draw_arrays GL_INTEL_blackhole_render GL_KHR_blend_equation_advanced GL_KHR_context_flush_control GL_KHR_debug GL_KHR_no_error GL_KHR_parallel_shader_compile GL_KHR_robust_buffer_access_behavior GL_KHR_robustness GL_KHR_texture_compression_astc_ldr GL_KHR_texture_compression_astc_sliced_3d GL_MESA_framebuffer_flip_y GL_MESA_pack_invert GL_MESA_shader_integer_functions GL_MESA_texture_signed_rgba GL_NVX_gpu_memory_info GL_NV_alpha_to_coverage_dither_control GL_NV_compute_shader_derivatives GL_NV_conditional_render GL_NV_copy_image GL_NV_depth_clamp GL_NV_packed_depth_stencil GL_NV_shader_atomic_int64 GL_NV_texture_barrier GL_NV_vdpau_interop GL_OES_EGL_image GL_S3_s3tc
[   0.101][v][vo/gpu/wayland] Loaded extension GL_NV_vdpau_interop.
[   0.101][d][vo/gpu/opengl] Texture formats:
[   0.101][d][vo/gpu/opengl]   NAME       COMP*TYPE SIZE           DEPTH PER COMP.
[   0.101][d][vo/gpu/opengl]   r8         1*unorm   1B    LF CR ST {8}
[   0.101][d][vo/gpu/opengl]   rg8        2*unorm   2B    LF CR ST {8 8}
[   0.101][d][vo/gpu/opengl]   rgb8       3*unorm   3B    LF CR ST {8 8 8}
[   0.101][d][vo/gpu/opengl]   rgba8      4*unorm   4B    LF CR ST {8 8 8 8}
[   0.101][d][vo/gpu/opengl]   r16        1*unorm   2B    LF CR ST {16}
[   0.101][d][vo/gpu/opengl]   rg16       2*unorm   4B    LF CR ST {16 16}
[   0.101][d][vo/gpu/opengl]   rgb16      3*unorm   6B    LF CR ST {16 16 16}
[   0.101][d][vo/gpu/opengl]   rgba16     4*unorm   8B    LF CR ST {16 16 16 16}
[   0.101][d][vo/gpu/opengl]   r8ui       1*uint    1B       CR ST {8}
[   0.101][d][vo/gpu/opengl]   rg8ui      2*uint    2B       CR ST {8 8}
[   0.101][d][vo/gpu/opengl]   rgb8ui     3*uint    3B          ST {8 8 8}
[   0.101][d][vo/gpu/opengl]   rgba8ui    4*uint    4B       CR ST {8 8 8 8}
[   0.101][d][vo/gpu/opengl]   r16ui      1*uint    2B       CR ST {16}
[   0.101][d][vo/gpu/opengl]   rg16ui     2*uint    4B       CR ST {16 16}
[   0.101][d][vo/gpu/opengl]   rgb16ui    3*uint    6B          ST {16 16 16}
[   0.101][d][vo/gpu/opengl]   rgba16ui   4*uint    8B       CR ST {16 16 16 16}
[   0.101][d][vo/gpu/opengl]   r16f       1*float   4B    LF CR ST {32/16}
[   0.101][d][vo/gpu/opengl]   rg16f      2*float   8B    LF CR ST {32/16 32/16}
[   0.101][d][vo/gpu/opengl]   rgb16f     3*float  12B    LF CR ST {32/16 32/16 32/16}
[   0.101][d][vo/gpu/opengl]   rgba16f    4*float  16B    LF CR ST {32/16 32/16 32/16 32/16}
[   0.101][d][vo/gpu/opengl]   r32f       1*float   4B    LF CR ST {32}
[   0.101][d][vo/gpu/opengl]   rg32f      2*float   8B    LF CR ST {32 32}
[   0.101][d][vo/gpu/opengl]   rgb32f     3*float  12B    LF CR ST {32 32 32}
[   0.101][d][vo/gpu/opengl]   rgba32f    4*float  16B    LF CR ST {32 32 32 32}
[   0.101][d][vo/gpu/opengl]   rgb10_a2   4*unorm   4B    LF CR ST {0/10 0/10 0/10 0/2}
[   0.101][d][vo/gpu/opengl]   rgba12     4*unorm   8B    LF CR ST {16 16 16 16}
[   0.101][d][vo/gpu/opengl]   rgb10      3*unorm   6B    LF CR ST {16/10 16/10 16/10}
[   0.101][d][vo/gpu/opengl]   rgb565     3*unorm   2B    LF    ST {0/8 0/8 0/8}
[   0.101][d][vo/gpu/opengl]  LA = LUMINANCE_ALPHA hack format
[   0.101][d][vo/gpu/opengl]  LF = linear filterable
[   0.101][d][vo/gpu/opengl]  CR = can be used for render targets
[   0.101][d][vo/gpu/opengl]  ST = can be used for storable images
[   0.101][d][vo/gpu/opengl] Image formats:
[   0.101][d][vo/gpu/opengl]   yuv444p => 3 planes 1x1 8/0 [r8/r8/r8] (r/g/b) [unorm]
[   0.101][d][vo/gpu/opengl]   yuv420p => 3 planes 2x2 8/0 [r8/r8/r8] (r/g/b) [unorm]
[   0.101][d][vo/gpu/opengl]   gray => 1 planes 1x1 8/0 [r8] (r) [unorm]
[   0.101][d][vo/gpu/opengl]   gray16 => 1 planes 1x1 16/0 [r16] (r) [unorm]
[   0.101][d][vo/gpu/opengl]   uyvy422
[   0.101][d][vo/gpu/opengl]   nv12 => 2 planes 2x2 8/0 [r8/rg8] (r/gb) [unorm]
[   0.101][d][vo/gpu/opengl]   p010 => 2 planes 2x2 16/6 [r16/rg16] (r/gb) [unorm]
[   0.101][d][vo/gpu/opengl]   argb => 1 planes 1x1 8/0 [rgba8] (argb) [unorm]
[   0.101][d][vo/gpu/opengl]   bgra => 1 planes 1x1 8/0 [rgba8] (bgra) [unorm]
[   0.101][d][vo/gpu/opengl]   abgr => 1 planes 1x1 8/0 [rgba8] (abgr) [unorm]
[   0.101][d][vo/gpu/opengl]   rgba => 1 planes 1x1 8/0 [rgba8] (rgba) [unorm]
[   0.101][d][vo/gpu/opengl]   bgr24 => 1 planes 1x1 8/0 [rgb8] (bgr) [unorm]
[   0.101][d][vo/gpu/opengl]   rgb24 => 1 planes 1x1 8/0 [rgb8] (rgb) [unorm]
[   0.101][d][vo/gpu/opengl]   0rgb => 1 planes 1x1 8/0 [rgba8] (_rgb) [unorm]
[   0.101][d][vo/gpu/opengl]   bgr0 => 1 planes 1x1 8/0 [rgba8] (bgr) [unorm]
[   0.101][d][vo/gpu/opengl]   0bgr => 1 planes 1x1 8/0 [rgba8] (_bgr) [unorm]
[   0.101][d][vo/gpu/opengl]   rgb0 => 1 planes 1x1 8/0 [rgba8] (rgb) [unorm]
[   0.101][d][vo/gpu/opengl]   rgba64 => 1 planes 1x1 16/0 [rgba16] (rgba) [unorm]
[   0.101][d][vo/gpu/opengl]   rgb565 => 1 planes 1x1 0/0 [rgb565] (rgb) [unknown]
[   0.101][d][vo/gpu/opengl]   pal8
[   0.101][d][vo/gpu/opengl]   vdpau
[   0.101][d][vo/gpu/opengl]   d3d11
[   0.101][d][vo/gpu/opengl]   dxva2_vld
[   0.101][d][vo/gpu/opengl]   mmal
[   0.101][d][vo/gpu/opengl]   mediacodec
[   0.101][d][vo/gpu/opengl]   drm_prime
[   0.101][d][vo/gpu/opengl]   cuda
[   0.101][d][vo/gpu/opengl]   yap8 => 2 planes 1x1 8/0 [r8/r8] (r/a) [unorm]
[   0.101][d][vo/gpu/opengl]   yap16 => 2 planes 1x1 16/0 [r16/r16] (r/a) [unorm]
[   0.101][d][vo/gpu/opengl]   grayaf32 => 2 planes 1x1 32/0 [r16f/r16f] (r/a) [float]
[   0.101][d][vo/gpu/opengl]   yuv444pf => 3 planes 1x1 32/0 [r16f/r16f/r16f] (r/g/b) [float]
[   0.101][d][vo/gpu/opengl]   yuva444pf => 4 planes 1x1 32/0 [r16f/r16f/r16f/r16f] (r/g/b/a) [float]
[   0.101][d][vo/gpu/opengl]   yuv420pf => 3 planes 2x2 32/0 [r16f/r16f/r16f] (r/g/b) [float]
[   0.101][d][vo/gpu/opengl]   yuva420pf => 4 planes 2x2 32/0 [r16f/r16f/r16f/r16f] (r/g/b/a) [float]
[   0.101][d][vo/gpu/opengl]   yuv422pf => 3 planes 2x1 32/0 [r16f/r16f/r16f] (r/g/b) [float]
[   0.101][d][vo/gpu/opengl]   yuva422pf => 4 planes 2x1 32/0 [r16f/r16f/r16f/r16f] (r/g/b/a) [float]
[   0.101][d][vo/gpu/opengl]   yuv440pf => 3 planes 1x2 32/0 [r16f/r16f/r16f] (r/g/b) [float]
[   0.101][d][vo/gpu/opengl]   yuva440pf => 4 planes 1x2 32/0 [r16f/r16f/r16f/r16f] (r/g/b/a) [float]
[   0.101][d][vo/gpu/opengl]   yuv410pf => 3 planes 4x4 32/0 [r16f/r16f/r16f] (r/g/b) [float]
[   0.101][d][vo/gpu/opengl]   yuva410pf => 4 planes 4x4 32/0 [r16f/r16f/r16f/r16f] (r/g/b/a) [float]
[   0.101][d][vo/gpu/opengl]   yuv411pf => 3 planes 4x1 32/0 [r16f/r16f/r16f] (r/g/b) [float]
[   0.101][d][vo/gpu/opengl]   yuva411pf => 4 planes 4x1 32/0 [r16f/r16f/r16f/r16f] (r/g/b/a) [float]
[   0.101][d][vo/gpu/opengl]   rgb30 => 1 planes 1x1 10/0 [rgb10_a2] (bgr) [unknown]
[   0.101][d][vo/gpu/opengl]   y1 => 1 planes 1x1 8/-7 [r8] (r) [unorm]
[   0.101][d][vo/gpu/opengl]   gbrp1 => 3 planes 1x1 8/-7 [r8/r8/r8] (g/b/r) [unorm]
[   0.101][d][vo/gpu/opengl]   gbrp2 => 3 planes 1x1 8/-6 [r8/r8/r8] (g/b/r) [unorm]
[   0.101][d][vo/gpu/opengl]   gbrp3 => 3 planes 1x1 8/-5 [r8/r8/r8] (g/b/r) [unorm]
[   0.101][d][vo/gpu/opengl]   gbrp4 => 3 planes 1x1 8/-4 [r8/r8/r8] (g/b/r) [unorm]
[   0.101][d][vo/gpu/opengl]   gbrp5 => 3 planes 1x1 8/-3 [r8/r8/r8] (g/b/r) [unorm]
[   0.101][d][vo/gpu/opengl]   gbrp6 => 3 planes 1x1 8/-2 [r8/r8/r8] (g/b/r) [unorm]
[   0.101][d][vo/gpu/opengl]   vdpau_output
[   0.101][d][vo/gpu/opengl]   vaapi
[   0.101][d][vo/gpu/opengl]   videotoolbox
[   0.101][d][vo/gpu/opengl]   yuyv422
[   0.101][d][vo/gpu/opengl]   yuv422p => 3 planes 2x1 8/0 [r8/r8/r8] (r/g/b) [unorm]
[   0.101][d][vo/gpu/opengl]   yuv410p => 3 planes 4x4 8/0 [r8/r8/r8] (r/g/b) [unorm]
[   0.101][d][vo/gpu/opengl]   yuv411p => 3 planes 4x1 8/0 [r8/r8/r8] (r/g/b) [unorm]
[   0.101][d][vo/gpu/opengl]   monow
[   0.101][d][vo/gpu/opengl]   monob
[   0.101][d][vo/gpu/opengl]   yuvj422p => 3 planes 2x1 8/0 [r8/r8/r8] (r/g/b) [unorm]
[   0.101][d][vo/gpu/opengl]   uyyvyy411
[   0.101][d][vo/gpu/opengl]   bgr8
[   0.101][d][vo/gpu/opengl]   bgr4
[   0.101][d][vo/gpu/opengl]   bgr4_byte
[   0.101][d][vo/gpu/opengl]   rgb8
[   0.101][d][vo/gpu/opengl]   rgb4
[   0.101][d][vo/gpu/opengl]   rgb4_byte
[   0.101][d][vo/gpu/opengl]   nv21 => 2 planes 2x2 8/0 [r8/rg8] (r/bg) [unorm]
[   0.101][d][vo/gpu/opengl]   gray16be
[   0.101][d][vo/gpu/opengl]   yuv440p => 3 planes 1x2 8/0 [r8/r8/r8] (r/g/b) [unorm]
[   0.101][d][vo/gpu/opengl]   yuvj440p => 3 planes 1x2 8/0 [r8/r8/r8] (r/g/b) [unorm]
[   0.101][d][vo/gpu/opengl]   yuva420p => 4 planes 2x2 8/0 [r8/r8/r8/r8] (r/g/b/a) [unorm]
[   0.101][d][vo/gpu/opengl]   rgb48be
[   0.101][d][vo/gpu/opengl]   rgb48 => 1 planes 1x1 16/0 [rgb16] (rgb) [unorm]
[   0.101][d][vo/gpu/opengl]   rgb565be
[   0.101][d][vo/gpu/opengl]   rgb555be
[   0.101][d][vo/gpu/opengl]   rgb555
[   0.101][d][vo/gpu/opengl]   bgr565be
[   0.101][d][vo/gpu/opengl]   bgr565
[   0.101][d][vo/gpu/opengl]   bgr555be
[   0.102][d][vo/gpu/opengl]   bgr555
[   0.102][d][vo/gpu/opengl]   vaapi_moco
[   0.102][d][vo/gpu/opengl]   vaapi_idct
[   0.102][d][vo/gpu/opengl]   yuv420p16 => 3 planes 2x2 16/0 [r16/r16/r16] (r/g/b) [unorm]
[   0.102][d][vo/gpu/opengl]   yuv420p16be
[   0.102][d][vo/gpu/opengl]   yuv422p16 => 3 planes 2x1 16/0 [r16/r16/r16] (r/g/b) [unorm]
[   0.102][d][vo/gpu/opengl]   yuv422p16be
[   0.102][d][vo/gpu/opengl]   yuv444p16 => 3 planes 1x1 16/0 [r16/r16/r16] (r/g/b) [unorm]
[   0.102][d][vo/gpu/opengl]   yuv444p16be
[   0.102][d][vo/gpu/opengl]   rgb444
[   0.102][d][vo/gpu/opengl]   rgb444be
[   0.102][d][vo/gpu/opengl]   bgr444
[   0.102][d][vo/gpu/opengl]   bgr444be
[   0.102][d][vo/gpu/opengl]   ya8 => 1 planes 1x1 8/0 [rg8] (ra) [unorm]
[   0.102][d][vo/gpu/opengl]   bgr48be
[   0.102][d][vo/gpu/opengl]   bgr48 => 1 planes 1x1 16/0 [rgb16] (bgr) [unorm]
[   0.102][d][vo/gpu/opengl]   yuv420p9be
[   0.102][d][vo/gpu/opengl]   yuv420p9 => 3 planes 2x2 16/-7 [r16/r16/r16] (r/g/b) [unorm]
[   0.102][d][vo/gpu/opengl]   yuv420p10be
[   0.102][d][vo/gpu/opengl]   yuv420p10 => 3 planes 2x2 16/-6 [r16/r16/r16] (r/g/b) [unorm]
[   0.102][d][vo/gpu/opengl]   yuv422p10be
[   0.102][d][vo/gpu/opengl]   yuv422p10 => 3 planes 2x1 16/-6 [r16/r16/r16] (r/g/b) [unorm]
[   0.102][d][vo/gpu/opengl]   yuv444p9be
[   0.102][d][vo/gpu/opengl]   yuv444p9 => 3 planes 1x1 16/-7 [r16/r16/r16] (r/g/b) [unorm]
[   0.102][d][vo/gpu/opengl]   yuv444p10be
[   0.102][d][vo/gpu/opengl]   yuv444p10 => 3 planes 1x1 16/-6 [r16/r16/r16] (r/g/b) [unorm]
[   0.102][d][vo/gpu/opengl]   yuv422p9be
[   0.102][d][vo/gpu/opengl]   yuv422p9 => 3 planes 2x1 16/-7 [r16/r16/r16] (r/g/b) [unorm]
[   0.102][d][vo/gpu/opengl]   gbrp => 3 planes 1x1 8/0 [r8/r8/r8] (g/b/r) [unorm]
[   0.102][d][vo/gpu/opengl]   gbrp9be
[   0.102][d][vo/gpu/opengl]   gbrp9 => 3 planes 1x1 16/-7 [r16/r16/r16] (g/b/r) [unorm]
[   0.102][d][vo/gpu/opengl]   gbrp10be
[   0.102][d][vo/gpu/opengl]   gbrp10 => 3 planes 1x1 16/-6 [r16/r16/r16] (g/b/r) [unorm]
[   0.102][d][vo/gpu/opengl]   gbrp16be
[   0.102][d][vo/gpu/opengl]   gbrp16 => 3 planes 1x1 16/0 [r16/r16/r16] (g/b/r) [unorm]
[   0.102][d][vo/gpu/opengl]   yuva422p => 4 planes 2x1 8/0 [r8/r8/r8/r8] (r/g/b/a) [unorm]
[   0.102][d][vo/gpu/opengl]   yuva444p => 4 planes 1x1 8/0 [r8/r8/r8/r8] (r/g/b/a) [unorm]
[   0.102][d][vo/gpu/opengl]   yuva420p9be
[   0.102][d][vo/gpu/opengl]   yuva420p9 => 4 planes 2x2 16/-7 [r16/r16/r16/r16] (r/g/b/a) [unorm]
[   0.102][d][vo/gpu/opengl]   yuva422p9be
[   0.102][d][vo/gpu/opengl]   yuva422p9 => 4 planes 2x1 16/-7 [r16/r16/r16/r16] (r/g/b/a) [unorm]
[   0.102][d][vo/gpu/opengl]   yuva444p9be
[   0.102][d][vo/gpu/opengl]   yuva444p9 => 4 planes 1x1 16/-7 [r16/r16/r16/r16] (r/g/b/a) [unorm]
[   0.102][d][vo/gpu/opengl]   yuva420p10be
[   0.102][d][vo/gpu/opengl]   yuva420p10 => 4 planes 2x2 16/-6 [r16/r16/r16/r16] (r/g/b/a) [unorm]
[   0.102][d][vo/gpu/opengl]   yuva422p10be
[   0.102][d][vo/gpu/opengl]   yuva422p10 => 4 planes 2x1 16/-6 [r16/r16/r16/r16] (r/g/b/a) [unorm]
[   0.102][d][vo/gpu/opengl]   yuva444p10be
[   0.102][d][vo/gpu/opengl]   yuva444p10 => 4 planes 1x1 16/-6 [r16/r16/r16/r16] (r/g/b/a) [unorm]
[   0.102][d][vo/gpu/opengl]   yuva420p16be
[   0.102][d][vo/gpu/opengl]   yuva420p16 => 4 planes 2x2 16/0 [r16/r16/r16/r16] (r/g/b/a) [unorm]
[   0.102][d][vo/gpu/opengl]   yuva422p16be
[   0.102][d][vo/gpu/opengl]   yuva422p16 => 4 planes 2x1 16/0 [r16/r16/r16/r16] (r/g/b/a) [unorm]
[   0.102][d][vo/gpu/opengl]   yuva444p16be
[   0.102][d][vo/gpu/opengl]   yuva444p16 => 4 planes 1x1 16/0 [r16/r16/r16/r16] (r/g/b/a) [unorm]
[   0.102][d][vo/gpu/opengl]   xyz12 => 1 planes 1x1 16/4 [rgb16] (rgb) [unorm]
[   0.102][d][vo/gpu/opengl]   xyz12be
[   0.102][d][vo/gpu/opengl]   nv16 => 2 planes 2x1 8/0 [r8/rg8] (r/gb) [unorm]
[   0.102][d][vo/gpu/opengl]   nv20 => 2 planes 2x1 16/-6 [r16/rg16] (r/gb) [unorm]
[   0.102][d][vo/gpu/opengl]   nv20be
[   0.102][d][vo/gpu/opengl]   rgba64be
[   0.102][d][vo/gpu/opengl]   bgra64be
[   0.102][d][vo/gpu/opengl]   bgra64 => 1 planes 1x1 16/0 [rgba16] (bgra) [unorm]
[   0.102][d][vo/gpu/opengl]   yvyu422
[   0.102][d][vo/gpu/opengl]   ya16be
[   0.102][d][vo/gpu/opengl]   ya16 => 1 planes 1x1 16/0 [rg16] (ra) [unorm]
[   0.102][d][vo/gpu/opengl]   gbrap => 4 planes 1x1 8/0 [r8/r8/r8/r8] (g/b/r/a) [unorm]
[   0.102][d][vo/gpu/opengl]   gbrap16be
[   0.102][d][vo/gpu/opengl]   gbrap16 => 4 planes 1x1 16/0 [r16/r16/r16/r16] (g/b/r/a) [unorm]
[   0.102][d][vo/gpu/opengl]   qsv
[   0.102][d][vo/gpu/opengl]   d3d11va_vld
[   0.102][d][vo/gpu/opengl]   yuv420p12be
[   0.102][d][vo/gpu/opengl]   yuv420p12 => 3 planes 2x2 16/-4 [r16/r16/r16] (r/g/b) [unorm]
[   0.102][d][vo/gpu/opengl]   yuv420p14be
[   0.102][d][vo/gpu/opengl]   yuv420p14 => 3 planes 2x2 16/-2 [r16/r16/r16] (r/g/b) [unorm]
[   0.102][d][vo/gpu/opengl]   yuv422p12be
[   0.102][d][vo/gpu/opengl]   yuv422p12 => 3 planes 2x1 16/-4 [r16/r16/r16] (r/g/b) [unorm]
[   0.102][d][vo/gpu/opengl]   yuv422p14be
[   0.102][d][vo/gpu/opengl]   yuv422p14 => 3 planes 2x1 16/-2 [r16/r16/r16] (r/g/b) [unorm]
[   0.102][d][vo/gpu/opengl]   yuv444p12be
[   0.102][d][vo/gpu/opengl]   yuv444p12 => 3 planes 1x1 16/-4 [r16/r16/r16] (r/g/b) [unorm]
[   0.102][d][vo/gpu/opengl]   yuv444p14be
[   0.102][d][vo/gpu/opengl]   yuv444p14 => 3 planes 1x1 16/-2 [r16/r16/r16] (r/g/b) [unorm]
[   0.102][d][vo/gpu/opengl]   gbrp12be
[   0.102][d][vo/gpu/opengl]   gbrp12 => 3 planes 1x1 16/-4 [r16/r16/r16] (g/b/r) [unorm]
[   0.102][d][vo/gpu/opengl]   gbrp14be
[   0.102][d][vo/gpu/opengl]   gbrp14 => 3 planes 1x1 16/-2 [r16/r16/r16] (g/b/r) [unorm]
[   0.102][d][vo/gpu/opengl]   yuvj411p => 3 planes 4x1 8/0 [r8/r8/r8] (r/g/b) [unorm]
[   0.102][d][vo/gpu/opengl]   bayer_bggr8
[   0.102][d][vo/gpu/opengl]   bayer_rggb8
[   0.102][d][vo/gpu/opengl]   bayer_gbrg8
[   0.102][d][vo/gpu/opengl]   bayer_grbg8
[   0.102][d][vo/gpu/opengl]   bayer_bggr16
[   0.102][d][vo/gpu/opengl]   bayer_bggr16be
[   0.102][d][vo/gpu/opengl]   bayer_rggb16
[   0.102][d][vo/gpu/opengl]   bayer_rggb16be
[   0.102][d][vo/gpu/opengl]   bayer_gbrg16
[   0.102][d][vo/gpu/opengl]   bayer_gbrg16be
[   0.102][d][vo/gpu/opengl]   bayer_grbg16
[   0.102][d][vo/gpu/opengl]   bayer_grbg16be
[   0.102][d][vo/gpu/opengl]   xvmc
[   0.102][d][vo/gpu/opengl]   yuv440p10 => 3 planes 1x2 16/-6 [r16/r16/r16] (r/g/b) [unorm]
[   0.102][d][vo/gpu/opengl]   yuv440p10be
[   0.102][d][vo/gpu/opengl]   yuv440p12 => 3 planes 1x2 16/-4 [r16/r16/r16] (r/g/b) [unorm]
[   0.102][d][vo/gpu/opengl]   yuv440p12be
[   0.102][d][vo/gpu/opengl]   ayuv64 => 1 planes 1x1 16/0 [rgba16] (argb) [unorm]
[   0.102][d][vo/gpu/opengl]   ayuv64be
[   0.102][d][vo/gpu/opengl]   p010be
[   0.102][d][vo/gpu/opengl]   gbrap12be
[   0.102][d][vo/gpu/opengl]   gbrap12 => 4 planes 1x1 16/-4 [r16/r16/r16/r16] (g/b/r/a) [unorm]
[   0.102][d][vo/gpu/opengl]   gbrap10be
[   0.102][d][vo/gpu/opengl]   gbrap10 => 4 planes 1x1 16/-6 [r16/r16/r16/r16] (g/b/r/a) [unorm]
[   0.102][d][vo/gpu/opengl]   gray12be
[   0.102][d][vo/gpu/opengl]   gray12 => 1 planes 1x1 16/-4 [r16] (r) [unorm]
[   0.102][d][vo/gpu/opengl]   gray10be
[   0.102][d][vo/gpu/opengl]   gray10 => 1 planes 1x1 16/-6 [r16] (r) [unorm]
[   0.102][d][vo/gpu/opengl]   p016 => 2 planes 2x2 16/0 [r16/rg16] (r/gb) [unorm]
[   0.102][d][vo/gpu/opengl]   p016be
[   0.102][d][vo/gpu/opengl]   gray9be
[   0.102][d][vo/gpu/opengl]   gray9 => 1 planes 1x1 16/-7 [r16] (r) [unorm]
[   0.102][d][vo/gpu/opengl]   gbrpf32be
[   0.102][d][vo/gpu/opengl]   gbrpf32 => 3 planes 1x1 32/0 [r16f/r16f/r16f] (g/b/r) [float]
[   0.102][d][vo/gpu/opengl]   gbrapf32be
[   0.102][d][vo/gpu/opengl]   gbrapf32 => 4 planes 1x1 32/0 [r16f/r16f/r16f/r16f] (g/b/r/a) [float]
[   0.102][d][vo/gpu/opengl]   opencl
[   0.102][d][vo/gpu/opengl]   gray14be
[   0.102][d][vo/gpu/opengl]   gray14 => 1 planes 1x1 16/-2 [r16] (r) [unorm]
[   0.102][d][vo/gpu/opengl]   grayf32be
[   0.102][d][vo/gpu/opengl]   grayf32 => 1 planes 1x1 32/0 [r16f] (r) [float]
[   0.102][d][vo/gpu/opengl]   yuva422p12be
[   0.102][d][vo/gpu/opengl]   yuva422p12 => 4 planes 2x1 16/-4 [r16/r16/r16/r16] (r/g/b/a) [unorm]
[   0.102][d][vo/gpu/opengl]   yuva444p12be
[   0.102][d][vo/gpu/opengl]   yuva444p12 => 4 planes 1x1 16/-4 [r16/r16/r16/r16] (r/g/b/a) [unorm]
[   0.102][d][vo/gpu/opengl]   nv24 => 2 planes 1x1 8/0 [r8/rg8] (r/gb) [unorm]
[   0.102][d][vo/gpu/opengl]   nv42 => 2 planes 1x1 8/0 [r8/rg8] (r/bg) [unorm]
[   0.102][d][vo/gpu/opengl]   vulkan
[   0.102][d][vo/gpu/opengl]   y210be
[   0.102][d][vo/gpu/opengl]   y210
[   0.102][d][vo/gpu/opengl]   x2rgb10
[   0.102][d][vo/gpu/opengl]   x2rgb10be
[   0.102][v][vo/gpu] Testing FBO format rgba16f
[   0.102][d][vo/gpu] Resizing texture: 16x16
[   0.102][v][vo/gpu] Using FBO format rgba16f.
[   0.102][v][vo/gpu/wayland] Registered output Dell Inc. DELL P2317H (0x2d):
[   0.102][v][vo/gpu/wayland] 	x: 0px, y: 0px
[   0.102][v][vo/gpu/wayland] 	w: 1920px (510mm), h: 1080px (290mm)
[   0.102][v][vo/gpu/wayland] 	scale: 1
[   0.102][v][vo/gpu/wayland] 	Hz: 60.000000
[   0.102][v][vo/gpu/wayland] Registered output Dell Inc. DELL P2317H (0x2e):
[   0.102][v][vo/gpu/wayland] 	x: 0px, y: 0px
[   0.102][v][vo/gpu/wayland] 	w: 1920px (510mm), h: 1080px (290mm)
[   0.102][v][vo/gpu/wayland] 	scale: 1
[   0.102][v][vo/gpu/wayland] 	Hz: 60.000000
[   0.102][v][vo/gpu/wayland] Registered output Sony SONY TV (0x2f):
[   0.102][v][vo/gpu/wayland] 	x: 0px, y: 0px
[   0.102][v][vo/gpu/wayland] 	w: 1920px (1600mm), h: 1080px (900mm)
[   0.102][v][vo/gpu/wayland] 	scale: 1
[   0.102][v][vo/gpu/wayland] 	Hz: 60.000000
[   0.102][v][vo/gpu] Resize: 0x0
[   0.105][v][vd] Container reported FPS: 23.975987
[   0.105][v][vd] Codec list:
[   0.105][v][vd]     h264 - H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10
[   0.105][v][vd]     h264_v4l2m2m (h264) - V4L2 mem2mem H.264 decoder wrapper
[   0.105][v][vd]     h264_cuvid (h264) - Nvidia CUVID H264 decoder
[   0.105][v][vd] Opening decoder h264
[   0.105][v][vd] Looking at hwdec h264-nvdec...
[   0.105][v][vo/gpu] Loading hwdec driver 'vaapi-egl'
[   0.105][v][vo/gpu/vaapi-egl] using VAAPI EGL interop
[   0.105][v][vo/gpu/vaapi-egl] Trying to open a x11 VA display...
[   0.105][v][vo/gpu/vaapi-egl] Trying to open a wayland VA display...
[   0.106][d][vo/gpu/vaapi-egl/vaapi] libva: VA-API version 1.13.0
[   0.106][d][vo/gpu/vaapi-egl/vaapi] libva: Trying to open /usr/lib64/dri/radeonsi_drv_video.so
[   0.107][d][vo/gpu/vaapi-egl/vaapi] libva: Found init function __vaDriverInit_1_12
[   0.112][d][vo/gpu/vaapi-egl/vaapi] libva: va_openDriver() returns 0
[   0.112][v][vo/gpu/vaapi-egl/vaapi] Initialized VAAPI: version 1.13
[   0.112][d][ffmpeg] AVHWDeviceContext: VAAPI driver: Mesa Gallium driver 21.2.5 for AMD Radeon (TM) R9 380 Series (TONGA, DRM 3.41.0, 5.13.19_1, LLVM 12.0.1).
[   0.112][d][ffmpeg] AVHWDeviceContext: Driver not found in known nonstandard list, using standard behaviour.
[   0.112][v][vo/gpu/vaapi-egl] Going to probe surface formats (may log bogus errors)...
[   0.114][d][vo/gpu/vaapi-egl] Supported formats:
[   0.114][d][vo/gpu/vaapi-egl]  nv12
[   0.114][d][vo/gpu/vaapi-egl]  p010
[   0.114][d][vo/gpu/vaapi-egl]  bgra
[   0.114][d][vo/gpu/vaapi-egl]  rgba
[   0.114][d][vo/gpu/vaapi-egl]  bgr0
[   0.114][d][vo/gpu/vaapi-egl]  rgb0
[   0.114][v][vo/gpu/vaapi-egl] Done probing surface formats.
[   0.114][v][vo/gpu] Loading hwdec driver 'drmprime-drm'
[   0.114][v][vo/gpu/drmprime-drm] Failed to retrieve DRM fd from native display.
[   0.114][v][vo/gpu] Loading failed.
[   0.114][v][vd] Could not create device.
[   0.114][v][vd] Looking at hwdec h264-vaapi...
[   0.114][v][vd] Trying hardware decoding via h264-vaapi.
[   0.115][v][vd] Pixel formats supported by decoder: vdpau cuda vaapi_vld yuv420p
[   0.115][v][vd] Codec profile: High (0x64)
[   0.116][v][vd] Requesting pixfmt 'vaapi_vld' from decoder.
[   0.116][d][ffmpeg/video] h264: Reinit context to 1920x1040, pix_fmt: vaapi_vld
[   0.120][v][vd] Selected codec: h264 (H.264 / AVC / MPEG-4 AVC / MPEG-4 part 10)
[   0.120][v][vf] User filter list:
[   0.120][v][vf]   (empty)
[   0.121][v][ad] Codec list:
[   0.121][v][ad]     ac3 - ATSC A/52A (AC-3)
[   0.121][v][ad]     ac3_fixed (ac3) - ATSC A/52A (AC-3)
[   0.121][v][ad] Opening decoder ac3
[   0.121][v][ad] Requesting 1 threads for decoding.
[   0.121][v][ad] Selected codec: ac3 (ATSC A/52A (AC-3))
[   0.121][v][af] User filter list:
[   0.121][v][af]   (empty)
[   0.121][v][cplayer] Starting playback...
[   0.121][v][mkv] queuing seek to 0.000000
[   0.121][v][mkv] execute seek (to 0.000000 flags 32)
[   0.121][v][cplayer] hr-seek, skipping to 0.000000
[   0.121][v][mkv] seek done
[   0.121][v][vd] Pixel formats supported by decoder: vdpau cuda vaapi_vld yuv420p
[   0.121][v][vd] Codec profile: High (0x64)
[   0.122][v][vd] Requesting pixfmt 'vaapi_vld' from decoder.
[   0.122][d][ffmpeg/video] h264: Reinit context to 1920x1040, pix_fmt: vaapi_vld
[   0.154][i][vd] Using hardware decoding (vaapi).
[   0.154][v][vd] Decoder format: 1920x1032 vaapi[nv12] auto/auto/auto/auto/auto CL=mpeg2/4/h264
[   0.154][v][vd] Using container aspect ratio.
[   0.154][v][vf] [in] 1920x1032 vaapi[nv12] bt.709/bt.709/bt.1886/limited/display SP=1.000000 CL=mpeg2/4/h264
[   0.154][v][vf] [userdeint] 1920x1032 vaapi[nv12] bt.709/bt.709/bt.1886/limited/display SP=1.000000 CL=mpeg2/4/h264
[   0.154][v][vf] [userdeint] (disabled)
[   0.154][v][vf] [autorotate] 1920x1032 vaapi[nv12] bt.709/bt.709/bt.1886/limited/display SP=1.000000 CL=mpeg2/4/h264
[   0.154][v][vf] [autorotate] (disabled)
[   0.154][v][vf] [convert] 1920x1032 vaapi[nv12] bt.709/bt.709/bt.1886/limited/display SP=1.000000 CL=mpeg2/4/h264
[   0.154][v][vf] [convert] (disabled)
[   0.154][v][vf] [out] 1920x1032 vaapi[nv12] bt.709/bt.709/bt.1886/limited/display SP=1.000000 CL=mpeg2/4/h264
[   0.154][v][af] [in] 48000Hz 5.1(side) 6ch floatp
[   0.154][v][af] [userspeed] 48000Hz 5.1(side) 6ch floatp
[   0.154][v][af] [userspeed] (disabled)
[   0.155][v][af] [convert] 48000Hz 5.1(side) 6ch floatp
[   0.155][d][cplayer] Run command: enable-section, flags=64, args=[name="input_forced_osc", flags="allow-hide-cursor+allow-vo-dragging"]
[   0.155][v][ao] Trying audio driver 'pulse'
[   0.155][v][ao/pulse] requested format: 48000 Hz, 5.1(side) channels, floatp
[   0.155][v][ao/pulse] Library version: 15.0.0
[   0.155][v][ao/pulse] Proto: 35
[   0.155][v][ao/pulse] Server proto: 4294967295
[   0.156][v][ao/pulse] Channel layouts:
[   0.156][v][ao/pulse]  - #fl
[   0.156][v][ao/pulse]  - #fr
[   0.156][v][ao/pulse]  - #fc
[   0.157][v][ao/pulse]  - #lfe
[   0.157][v][ao/pulse]  - #bl
[   0.157][v][ao/pulse]  - #br
[   0.157][v][ao/pulse]  - #flc
[   0.157][v][ao/pulse]  - #frc
[   0.157][v][ao/pulse]  - #bc
[   0.157][v][ao/pulse]  - #sl
[   0.157][v][ao/pulse]  - #sr
[   0.157][v][ao/pulse]  - #tc
[   0.157][v][ao/pulse]  - #tfl
[   0.157][v][ao/pulse]  - #tfc
[   0.157][v][ao/pulse]  - #tfr
[   0.157][v][ao/pulse]  - #tbl
[   0.157][v][ao/pulse]  - #tbc
[   0.157][v][ao/pulse]  - #tbr
[   0.157][v][ao/pulse] result: 5.1(side)
[   0.162][v][ao/pulse] device buffer: 4800 samples.
[   0.162][v][ao/pulse] using soft-buffer of 9600 samples.
[   0.162][i][cplayer] AO: [pulse] 48000Hz 5.1(side) 6ch float
[   0.162][v][cplayer] AO: Description: PulseAudio audio output
[   0.162][v][autoconvert] inserting resampler
[   0.162][v][swresample] format change, reinitializing resampler
[   0.162][v][swresample] 48000Hz 5.1(side) floatp -> 48000Hz 5.1(side) float
[   0.162][v][af] [out] 48000Hz 5.1(side) 6ch float
[   0.162][d][osc] osc_init 
[   0.163][i][cplayer] VO: [gpu] 1920x1032 vaapi[nv12]
[   0.163][v][cplayer] VO: Description: Shader-based GPU Renderer
[   0.163][v][vo/gpu] reconfig to 1920x1032 vaapi[nv12] bt.709/bt.709/bt.1886/limited/display SP=1.000000 CL=mpeg2/4/h264
[   0.163][v][vo/gpu/wayland] Reconfiguring!
[   0.163][d][vo/gpu] screen size: 1920x1080
[   0.165][v][vo/gpu] Resize: 1344x722
[   0.165][v][vo/gpu] Window size: 1344x722 (Borders: l=0 t=0 r=0 b=0)
[   0.165][v][vo/gpu] Video source: 1920x1032 (1:1)
[   0.165][v][vo/gpu] Video display: (0, 0) 1920x1032 -> (0, 0) 1343x722
[   0.165][v][vo/gpu] Video scale: 0.699479/0.699612
[   0.165][v][vo/gpu] OSD borders: l=0 t=0 r=1 b=0
[   0.165][v][vo/gpu] Video borders: l=0 t=0 r=1 b=0
[   0.165][v][vo/gpu] Testing FBO format rgba16f
[   0.165][d][vo/gpu] Resizing texture: 16x16
[   0.165][v][vo/gpu] Using FBO format rgba16f.
[   0.165][v][vo/gpu/wayland] Handling resize on the egl side
[   0.165][v][vo/gpu] Resize: 1344x722
[   0.165][v][vo/gpu] Window size: 1344x722 (Borders: l=0 t=0 r=0 b=0)
[   0.165][v][vo/gpu] Video source: 1920x1032 (1:1)
[   0.165][v][vo/gpu] Video display: (0, 0) 1920x1032 -> (0, 0) 1343x722
[   0.165][v][vo/gpu] Video scale: 0.699479/0.699612
[   0.165][v][vo/gpu] OSD borders: l=0 t=0 r=1 b=0
[   0.165][v][vo/gpu] Video borders: l=0 t=0 r=1 b=0
[   0.165][v][vo/gpu] Reported display depth: 10
[   0.166][d][vo/gpu] Resizing texture: 1920x1032
[   0.174][d][vo/gpu/opengl] vertex shader source:
[   0.174][d][vo/gpu/opengl] [  1] #version 440
[   0.174][d][vo/gpu/opengl] [  2] #define tex1D texture
[   0.174][d][vo/gpu/opengl] [  3] #define tex3D texture
[   0.174][d][vo/gpu/opengl] [  4] #define LUT_POS(x, lut_size) mix(0.5 / (lut_size), 1.0 - 0.5 / (lut_size), (x))
[   0.174][d][vo/gpu/opengl] [  5] in vec2 vertex_position;
[   0.174][d][vo/gpu/opengl] [  6] in vec2 vertex_texcoord0;
[   0.174][d][vo/gpu/opengl] [  7] out vec2 texcoord0;
[   0.174][d][vo/gpu/opengl] [  8] void main() {
[   0.174][d][vo/gpu/opengl] [  9] gl_Position = vec4(vertex_position, 1.0, 1.0);
[   0.174][d][vo/gpu/opengl] [ 10] texcoord0 = vertex_texcoord0;
[   0.174][d][vo/gpu/opengl] [ 11] }
[   0.174][d][vo/gpu/opengl] fragment shader source:
[   0.174][d][vo/gpu/opengl] [  1] #version 440
[   0.174][d][vo/gpu/opengl] [  2] #define tex1D texture
[   0.174][d][vo/gpu/opengl] [  3] #define tex3D texture
[   0.174][d][vo/gpu/opengl] [  4] #define LUT_POS(x, lut_size) mix(0.5 / (lut_size), 1.0 - 0.5 / (lut_size), (x))
[   0.174][d][vo/gpu/opengl] [  5] out vec4 out_color;
[   0.174][d][vo/gpu/opengl] [  6] in vec2 texcoord0;
[   0.174][d][vo/gpu/opengl] [  7] layout(std140, binding=0) uniform UBO {
[   0.174][d][vo/gpu/opengl] [  8] layout(offset=0) vec2 texture_size0;
[   0.174][d][vo/gpu/opengl] [  9] layout(offset=16) mat2 texture_rot0;
[   0.174][d][vo/gpu/opengl] [ 10] layout(offset=48) vec2 texture_off0;
[   0.174][d][vo/gpu/opengl] [ 11] layout(offset=56) vec2 pixel_size0;
[   0.174][d][vo/gpu/opengl] [ 12] };
[   0.174][d][vo/gpu/opengl] [ 13] uniform float random;
[   0.174][d][vo/gpu/opengl] [ 14] uniform sampler2D texture0;
[   0.174][d][vo/gpu/opengl] [ 15] #define HOOKED_raw texture0
[   0.174][d][vo/gpu/opengl] [ 16] #define HOOKED_pos texcoord0
[   0.174][d][vo/gpu/opengl] [ 17] #define HOOKED_size texture_size0
[   0.174][d][vo/gpu/opengl] [ 18] #define HOOKED_rot texture_rot0
[   0.174][d][vo/gpu/opengl] [ 19] #define HOOKED_off texture_off0
[   0.174][d][vo/gpu/opengl] [ 20] #define HOOKED_pt pixel_size0
[   0.174][d][vo/gpu/opengl] [ 21] #define HOOKED_map texmap0
[   0.174][d][vo/gpu/opengl] [ 22] #define HOOKED_mul 1.000000
[   0.174][d][vo/gpu/opengl] [ 23] #define HOOKED_tex(pos) (HOOKED_mul * vec4(texture(HOOKED_raw, pos)).rgba)
[   0.174][d][vo/gpu/opengl] [ 24] #define HOOKED_texOff(off) HOOKED_tex(HOOKED_pos + HOOKED_pt * vec2(off))
[   0.174][d][vo/gpu/opengl] [ 25] #define LUMA_raw texture0
[   0.174][d][vo/gpu/opengl] [ 26] #define LUMA_pos texcoord0
[   0.174][d][vo/gpu/opengl] [ 27] #define LUMA_size texture_size0
[   0.174][d][vo/gpu/opengl] [ 28] #define LUMA_rot texture_rot0
[   0.174][d][vo/gpu/opengl] [ 29] #define LUMA_off texture_off0
[   0.174][d][vo/gpu/opengl] [ 30] #define LUMA_pt pixel_size0
[   0.174][d][vo/gpu/opengl] [ 31] #define LUMA_map texmap0
[   0.174][d][vo/gpu/opengl] [ 32] #define LUMA_mul 1.000000
[   0.174][d][vo/gpu/opengl] [ 33] #define LUMA_tex(pos) (LUMA_mul * vec4(texture(LUMA_raw, pos)).rgba)
[   0.174][d][vo/gpu/opengl] [ 34] #define LUMA_texOff(off) LUMA_tex(LUMA_pos + LUMA_pt * vec2(off))
[   0.174][d][vo/gpu/opengl] [ 35] float mod289(float x) { return x - floor(x * 1.0/289.0) * 289.0; }
[   0.174][d][vo/gpu/opengl] [ 36] float permute(float x) {
[   0.174][d][vo/gpu/opengl] [ 37] return mod289( mod289(34.0*x + 1.0) * (fract(x) + 1.0) );
[   0.174][d][vo/gpu/opengl] [ 38] }
[   0.174][d][vo/gpu/opengl] [ 39] float rand(float x) { return fract(x * 1.0/41.0); }
[   0.174][d][vo/gpu/opengl] [ 40] vec4 average(float range, inout float h) {
[   0.174][d][vo/gpu/opengl] [ 41] float dist = rand(h) * range; h = permute(h);
[   0.174][d][vo/gpu/opengl] [ 42] float dir = rand(h) * 6.2831853; h = permute(h);
[   0.174][d][vo/gpu/opengl] [ 43] vec2 o = dist * vec2(cos(dir), sin(dir));
[   0.174][d][vo/gpu/opengl] [ 44] vec4 ref[4];
[   0.174][d][vo/gpu/opengl] [ 45] ref[0] = HOOKED_texOff(vec2( o.x, o.y));
[   0.174][d][vo/gpu/opengl] [ 46] ref[1] = HOOKED_texOff(vec2(-o.y, o.x));
[   0.174][d][vo/gpu/opengl] [ 47] ref[2] = HOOKED_texOff(vec2(-o.x, -o.y));
[   0.174][d][vo/gpu/opengl] [ 48] ref[3] = HOOKED_texOff(vec2( o.y, -o.x));
[   0.174][d][vo/gpu/opengl] [ 49] return (ref[0] + ref[1] + ref[2] + ref[3])*0.25;
[   0.174][d][vo/gpu/opengl] [ 50] }
[   0.174][d][vo/gpu/opengl] [ 51] void main() {
[   0.174][d][vo/gpu/opengl] [ 52] vec4 color = vec4(0.0, 0.0, 0.0, 1.0);
[   0.174][d][vo/gpu/opengl] [ 53] {
[   0.174][d][vo/gpu/opengl] [ 54] vec3 _m = vec3(HOOKED_pos, random) + vec3(1.0);
[   0.174][d][vo/gpu/opengl] [ 55] float h = permute(permute(permute(_m.x)+_m.y)+_m.z);
[   0.174][d][vo/gpu/opengl] [ 56] color = HOOKED_tex(HOOKED_pos);
[   0.174][d][vo/gpu/opengl] [ 57] vec4 avg, diff;
[   0.174][d][vo/gpu/opengl] [ 58] avg = average(16.000000, h);
[   0.174][d][vo/gpu/opengl] [ 59] diff = abs(color - avg);
[   0.174][d][vo/gpu/opengl] [ 60] color = mix(avg, color, greaterThan(diff, vec4(0.003906)));
[   0.174][d][vo/gpu/opengl] [ 61] vec3 noise;
[   0.174][d][vo/gpu/opengl] [ 62] noise.x = rand(h); h = permute(h);
[   0.174][d][vo/gpu/opengl] [ 63] noise.y = rand(h); h = permute(h);
[   0.174][d][vo/gpu/opengl] [ 64] noise.z = rand(h); h = permute(h);
[   0.174][d][vo/gpu/opengl] [ 65] color.xyz += 0.005859 * (noise - vec3(0.5));
[   0.174][d][vo/gpu/opengl] [ 66] }
[   0.174][d][vo/gpu/opengl] [ 67] color.g = 0.000000;
[   0.174][d][vo/gpu/opengl] [ 68] color.b = 0.000000;
[   0.174][d][vo/gpu/opengl] [ 69] color.a = 1.000000;
[   0.174][d][vo/gpu/opengl] [ 70] out_color = color;
[   0.174][d][vo/gpu/opengl] [ 71] }
[   0.174][d][vo/gpu/opengl] shader link log (status=1): 
[   0.174][d][vo/gpu] Resizing texture: 960x516
[   0.175][d][vo/gpu/opengl] vertex shader source:
[   0.175][d][vo/gpu/opengl] [  1] #version 440
[   0.175][d][vo/gpu/opengl] [  2] #define tex1D texture
[   0.175][d][vo/gpu/opengl] [  3] #define tex3D texture
[   0.175][d][vo/gpu/opengl] [  4] #define LUT_POS(x, lut_size) mix(0.5 / (lut_size), 1.0 - 0.5 / (lut_size), (x))
[   0.175][d][vo/gpu/opengl] [  5] in vec2 vertex_position;
[   0.175][d][vo/gpu/opengl] [  6] in vec2 vertex_texcoord0;
[   0.175][d][vo/gpu/opengl] [  7] out vec2 texcoord0;
[   0.175][d][vo/gpu/opengl] [  8] void main() {
[   0.175][d][vo/gpu/opengl] [  9] gl_Position = vec4(vertex_position, 1.0, 1.0);
[   0.175][d][vo/gpu/opengl] [ 10] texcoord0 = vertex_texcoord0;
[   0.175][d][vo/gpu/opengl] [ 11] }
[   0.175][d][vo/gpu/opengl] fragment shader source:
[   0.175][d][vo/gpu/opengl] [  1] #version 440
[   0.175][d][vo/gpu/opengl] [  2] #define tex1D texture
[   0.175][d][vo/gpu/opengl] [  3] #define tex3D texture
[   0.175][d][vo/gpu/opengl] [  4] #define LUT_POS(x, lut_size) mix(0.5 / (lut_size), 1.0 - 0.5 / (lut_size), (x))
[   0.175][d][vo/gpu/opengl] [  5] out vec4 out_color;
[   0.175][d][vo/gpu/opengl] [  6] in vec2 texcoord0;
[   0.175][d][vo/gpu/opengl] [  7] layout(std140, binding=0) uniform UBO {
[   0.175][d][vo/gpu/opengl] [  8] layout(offset=0) vec2 texture_size0;
[   0.175][d][vo/gpu/opengl] [  9] layout(offset=16) mat2 texture_rot0;
[   0.175][d][vo/gpu/opengl] [ 10] layout(offset=48) vec2 texture_off0;
[   0.175][d][vo/gpu/opengl] [ 11] layout(offset=56) vec2 pixel_size0;
[   0.175][d][vo/gpu/opengl] [ 12] };
[   0.175][d][vo/gpu/opengl] [ 13] uniform float random;
[   0.175][d][vo/gpu/opengl] [ 14] uniform sampler2D texture0;
[   0.175][d][vo/gpu/opengl] [ 15] #define HOOKED_raw texture0
[   0.175][d][vo/gpu/opengl] [ 16] #define HOOKED_pos texcoord0
[   0.175][d][vo/gpu/opengl] [ 17] #define HOOKED_size texture_size0
[   0.175][d][vo/gpu/opengl] [ 18] #define HOOKED_rot texture_rot0
[   0.175][d][vo/gpu/opengl] [ 19] #define HOOKED_off texture_off0
[   0.175][d][vo/gpu/opengl] [ 20] #define HOOKED_pt pixel_size0
[   0.175][d][vo/gpu/opengl] [ 21] #define HOOKED_map texmap0
[   0.175][d][vo/gpu/opengl] [ 22] #define HOOKED_mul 1.000000
[   0.175][d][vo/gpu/opengl] [ 23] #define HOOKED_tex(pos) (HOOKED_mul * vec4(texture(HOOKED_raw, pos)).rgba)
[   0.175][d][vo/gpu/opengl] [ 24] #define HOOKED_texOff(off) HOOKED_tex(HOOKED_pos + HOOKED_pt * vec2(off))
[   0.175][d][vo/gpu/opengl] [ 25] #define CHROMA_raw texture0
[   0.175][d][vo/gpu/opengl] [ 26] #define CHROMA_pos texcoord0
[   0.175][d][vo/gpu/opengl] [ 27] #define CHROMA_size texture_size0
[   0.175][d][vo/gpu/opengl] [ 28] #define CHROMA_rot texture_rot0
[   0.175][d][vo/gpu/opengl] [ 29] #define CHROMA_off texture_off0
[   0.175][d][vo/gpu/opengl] [ 30] #define CHROMA_pt pixel_size0
[   0.175][d][vo/gpu/opengl] [ 31] #define CHROMA_map texmap0
[   0.175][d][vo/gpu/opengl] [ 32] #define CHROMA_mul 1.000000
[   0.175][d][vo/gpu/opengl] [ 33] #define CHROMA_tex(pos) (CHROMA_mul * vec4(texture(CHROMA_raw, pos)).rgba)
[   0.175][d][vo/gpu/opengl] [ 34] #define CHROMA_texOff(off) CHROMA_tex(CHROMA_pos + CHROMA_pt * vec2(off))
[   0.175][d][vo/gpu/opengl] [ 35] float mod289(float x) { return x - floor(x * 1.0/289.0) * 289.0; }
[   0.175][d][vo/gpu/opengl] [ 36] float permute(float x) {
[   0.175][d][vo/gpu/opengl] [ 37] return mod289( mod289(34.0*x + 1.0) * (fract(x) + 1.0) );
[   0.175][d][vo/gpu/opengl] [ 38] }
[   0.175][d][vo/gpu/opengl] [ 39] float rand(float x) { return fract(x * 1.0/41.0); }
[   0.175][d][vo/gpu/opengl] [ 40] vec4 average(float range, inout float h) {
[   0.175][d][vo/gpu/opengl] [ 41] float dist = rand(h) * range; h = permute(h);
[   0.175][d][vo/gpu/opengl] [ 42] float dir = rand(h) * 6.2831853; h = permute(h);
[   0.175][d][vo/gpu/opengl] [ 43] vec2 o = dist * vec2(cos(dir), sin(dir));
[   0.175][d][vo/gpu/opengl] [ 44] vec4 ref[4];
[   0.175][d][vo/gpu/opengl] [ 45] ref[0] = HOOKED_texOff(vec2( o.x, o.y));
[   0.175][d][vo/gpu/opengl] [ 46] ref[1] = HOOKED_texOff(vec2(-o.y, o.x));
[   0.175][d][vo/gpu/opengl] [ 47] ref[2] = HOOKED_texOff(vec2(-o.x, -o.y));
[   0.175][d][vo/gpu/opengl] [ 48] ref[3] = HOOKED_texOff(vec2( o.y, -o.x));
[   0.175][d][vo/gpu/opengl] [ 49] return (ref[0] + ref[1] + ref[2] + ref[3])*0.25;
[   0.175][d][vo/gpu/opengl] [ 50] }
[   0.175][d][vo/gpu/opengl] [ 51] void main() {
[   0.175][d][vo/gpu/opengl] [ 52] vec4 color = vec4(0.0, 0.0, 0.0, 1.0);
[   0.175][d][vo/gpu/opengl] [ 53] {
[   0.175][d][vo/gpu/opengl] [ 54] vec3 _m = vec3(HOOKED_pos, random) + vec3(1.0);
[   0.175][d][vo/gpu/opengl] [ 55] float h = permute(permute(permute(_m.x)+_m.y)+_m.z);
[   0.175][d][vo/gpu/opengl] [ 56] color = HOOKED_tex(HOOKED_pos);
[   0.175][d][vo/gpu/opengl] [ 57] vec4 avg, diff;
[   0.175][d][vo/gpu/opengl] [ 58] avg = average(16.000000, h);
[   0.175][d][vo/gpu/opengl] [ 59] diff = abs(color - avg);
[   0.175][d][vo/gpu/opengl] [ 60] color = mix(avg, color, greaterThan(diff, vec4(0.003906)));
[   0.175][d][vo/gpu/opengl] [ 61] vec3 noise;
[   0.175][d][vo/gpu/opengl] [ 62] noise.x = rand(h); h = permute(h);
[   0.175][d][vo/gpu/opengl] [ 63] noise.y = rand(h); h = permute(h);
[   0.175][d][vo/gpu/opengl] [ 64] noise.z = rand(h); h = permute(h);
[   0.175][d][vo/gpu/opengl] [ 65] color.xyz += 0.005859 * (noise - vec3(0.5));
[   0.175][d][vo/gpu/opengl] [ 66] }
[   0.175][d][vo/gpu/opengl] [ 67] color.b = 0.000000;
[   0.175][d][vo/gpu/opengl] [ 68] color.a = 1.000000;
[   0.175][d][vo/gpu/opengl] [ 69] out_color = color;
[   0.175][d][vo/gpu/opengl] [ 70] }
[   0.175][d][vo/gpu/opengl] shader link log (status=1): 
[   0.181][d][vo/gpu] Resizing texture: 960x1032
[   0.181][d][vo/gpu/opengl] vertex shader source:
[   0.181][d][vo/gpu/opengl] [  1] #version 440
[   0.181][d][vo/gpu/opengl] [  2] #define tex1D texture
[   0.181][d][vo/gpu/opengl] [  3] #define tex3D texture
[   0.181][d][vo/gpu/opengl] [  4] #define LUT_POS(x, lut_size) mix(0.5 / (lut_size), 1.0 - 0.5 / (lut_size), (x))
[   0.181][d][vo/gpu/opengl] [  5] in vec2 vertex_position;
[   0.181][d][vo/gpu/opengl] [  6] in vec2 vertex_texcoord0;
[   0.181][d][vo/gpu/opengl] [  7] out vec2 texcoord0;
[   0.181][d][vo/gpu/opengl] [  8] void main() {
[   0.181][d][vo/gpu/opengl] [  9] gl_Position = vec4(vertex_position, 1.0, 1.0);
[   0.181][d][vo/gpu/opengl] [ 10] texcoord0 = vertex_texcoord0;
[   0.181][d][vo/gpu/opengl] [ 11] }
[   0.181][d][vo/gpu/opengl] fragment shader source:
[   0.181][d][vo/gpu/opengl] [  1] #version 440
[   0.181][d][vo/gpu/opengl] [  2] #define tex1D texture
[   0.181][d][vo/gpu/opengl] [  3] #define tex3D texture
[   0.181][d][vo/gpu/opengl] [  4] #define LUT_POS(x, lut_size) mix(0.5 / (lut_size), 1.0 - 0.5 / (lut_size), (x))
[   0.181][d][vo/gpu/opengl] [  5] out vec4 out_color;
[   0.181][d][vo/gpu/opengl] [  6] in vec2 texcoord0;
[   0.181][d][vo/gpu/opengl] [  7] layout(std140, binding=0) uniform UBO {
[   0.181][d][vo/gpu/opengl] [  8] layout(offset=0) vec2 texture_size0;
[   0.181][d][vo/gpu/opengl] [  9] layout(offset=16) mat2 texture_rot0;
[   0.181][d][vo/gpu/opengl] [ 10] layout(offset=48) vec2 texture_off0;
[   0.181][d][vo/gpu/opengl] [ 11] layout(offset=56) vec2 pixel_size0;
[   0.181][d][vo/gpu/opengl] [ 12] };
[   0.181][d][vo/gpu/opengl] [ 13] uniform sampler2D lut;
[   0.181][d][vo/gpu/opengl] [ 14] uniform sampler2D texture0;
[   0.181][d][vo/gpu/opengl] [ 15] void main() {
[   0.181][d][vo/gpu/opengl] [ 16] vec4 color = vec4(0.0, 0.0, 0.0, 1.0);
[   0.181][d][vo/gpu/opengl] [ 17] // upscaling plane 1
[   0.181][d][vo/gpu/opengl] [ 18] #undef tex
[   0.181][d][vo/gpu/opengl] [ 19] #undef texmap
[   0.181][d][vo/gpu/opengl] [ 20] #define tex texture0
[   0.181][d][vo/gpu/opengl] [ 21] #define texmap texmap0
[   0.181][d][vo/gpu/opengl] [ 22] vec2 pos = texcoord0;
[   0.181][d][vo/gpu/opengl] [ 23] vec2 size = texture_size0;
[   0.181][d][vo/gpu/opengl] [ 24] vec2 pt = pixel_size0;
[   0.181][d][vo/gpu/opengl] [ 25] // first pass
[   0.181][d][vo/gpu/opengl] [ 26] color = vec4(0.0);
[   0.181][d][vo/gpu/opengl] [ 27] {
[   0.181][d][vo/gpu/opengl] [ 28] vec2 dir = vec2(0.0, 1.0);
[   0.181][d][vo/gpu/opengl] [ 29] pt *= dir;
[   0.181][d][vo/gpu/opengl] [ 30] float fcoord = dot(fract(pos * size - vec2(0.5)), dir);
[   0.181][d][vo/gpu/opengl] [ 31] vec2 base = pos - fcoord * pt - pt * vec2(2.0);
[   0.181][d][vo/gpu/opengl] [ 32] vec4 c;
[   0.181][d][vo/gpu/opengl] [ 33] float ypos = LUT_POS(fcoord, 64.0);
[   0.181][d][vo/gpu/opengl] [ 34] float weights[6];
[   0.181][d][vo/gpu/opengl] [ 35] c = texture(lut, vec2(0.250000, ypos));
[   0.181][d][vo/gpu/opengl] [ 36] weights[0] = c[0];
[   0.181][d][vo/gpu/opengl] [ 37] weights[1] = c[1];
[   0.181][d][vo/gpu/opengl] [ 38] weights[2] = c[2];
[   0.181][d][vo/gpu/opengl] [ 39] weights[3] = c[3];
[   0.181][d][vo/gpu/opengl] [ 40] c = texture(lut, vec2(0.750000, ypos));
[   0.181][d][vo/gpu/opengl] [ 41] weights[4] = c[0];
[   0.181][d][vo/gpu/opengl] [ 42] weights[5] = c[1];
[   0.181][d][vo/gpu/opengl] [ 43] // scaler samples
[   0.181][d][vo/gpu/opengl] [ 44] c = texture(tex, base + pt * vec2(0.0));
[   0.181][d][vo/gpu/opengl] [ 45] color += vec4(weights[0]) * c;
[   0.181][d][vo/gpu/opengl] [ 46] c = texture(tex, base + pt * vec2(1.0));
[   0.181][d][vo/gpu/opengl] [ 47] color += vec4(weights[1]) * c;
[   0.181][d][vo/gpu/opengl] [ 48] c = texture(tex, base + pt * vec2(2.0));
[   0.181][d][vo/gpu/opengl] [ 49] color += vec4(weights[2]) * c;
[   0.181][d][vo/gpu/opengl] [ 50] c = texture(tex, base + pt * vec2(3.0));
[   0.181][d][vo/gpu/opengl] [ 51] color += vec4(weights[3]) * c;
[   0.181][d][vo/gpu/opengl] [ 52] c = texture(tex, base + pt * vec2(4.0));
[   0.181][d][vo/gpu/opengl] [ 53] color += vec4(weights[4]) * c;
[   0.181][d][vo/gpu/opengl] [ 54] c = texture(tex, base + pt * vec2(5.0));
[   0.181][d][vo/gpu/opengl] [ 55] color += vec4(weights[5]) * c;
[   0.181][d][vo/gpu/opengl] [ 56] }
[   0.181][d][vo/gpu/opengl] [ 57] color *= 1.000000;
[   0.181][d][vo/gpu/opengl] [ 58] out_color = color;
[   0.181][d][vo/gpu/opengl] [ 59] }
[   0.181][d][vo/gpu/opengl] shader link log (status=1): 
[   0.181][d][vo/gpu] Resizing texture: 1920x1032
[   0.182][d][vo/gpu/opengl] vertex shader source:
[   0.182][d][vo/gpu/opengl] [  1] #version 440
[   0.182][d][vo/gpu/opengl] [  2] #define tex1D texture
[   0.182][d][vo/gpu/opengl] [  3] #define tex3D texture
[   0.182][d][vo/gpu/opengl] [  4] #define LUT_POS(x, lut_size) mix(0.5 / (lut_size), 1.0 - 0.5 / (lut_size), (x))
[   0.182][d][vo/gpu/opengl] [  5] in vec2 vertex_position;
[   0.182][d][vo/gpu/opengl] [  6] in vec2 vertex_texcoord0;
[   0.182][d][vo/gpu/opengl] [  7] out vec2 texcoord0;
[   0.182][d][vo/gpu/opengl] [  8] void main() {
[   0.182][d][vo/gpu/opengl] [  9] gl_Position = vec4(vertex_position, 1.0, 1.0);
[   0.182][d][vo/gpu/opengl] [ 10] texcoord0 = vertex_texcoord0;
[   0.182][d][vo/gpu/opengl] [ 11] }
[   0.182][d][vo/gpu/opengl] fragment shader source:
[   0.182][d][vo/gpu/opengl] [  1] #version 440
[   0.182][d][vo/gpu/opengl] [  2] #define tex1D texture
[   0.182][d][vo/gpu/opengl] [  3] #define tex3D texture
[   0.182][d][vo/gpu/opengl] [  4] #define LUT_POS(x, lut_size) mix(0.5 / (lut_size), 1.0 - 0.5 / (lut_size), (x))
[   0.182][d][vo/gpu/opengl] [  5] out vec4 out_color;
[   0.182][d][vo/gpu/opengl] [  6] in vec2 texcoord0;
[   0.182][d][vo/gpu/opengl] [  7] layout(std140, binding=0) uniform UBO {
[   0.182][d][vo/gpu/opengl] [  8] layout(offset=0) vec2 texture_size0;
[   0.182][d][vo/gpu/opengl] [  9] layout(offset=16) mat2 texture_rot0;
[   0.182][d][vo/gpu/opengl] [ 10] layout(offset=48) vec2 texture_off0;
[   0.182][d][vo/gpu/opengl] [ 11] layout(offset=56) vec2 pixel_size0;
[   0.182][d][vo/gpu/opengl] [ 12] };
[   0.182][d][vo/gpu/opengl] [ 13] uniform sampler2D lut;
[   0.182][d][vo/gpu/opengl] [ 14] uniform sampler2D texture0;
[   0.182][d][vo/gpu/opengl] [ 15] void main() {
[   0.182][d][vo/gpu/opengl] [ 16] vec4 color = vec4(0.0, 0.0, 0.0, 1.0);
[   0.182][d][vo/gpu/opengl] [ 17] #undef tex
[   0.182][d][vo/gpu/opengl] [ 18] #undef texmap
[   0.182][d][vo/gpu/opengl] [ 19] #define tex texture0
[   0.182][d][vo/gpu/opengl] [ 20] #define texmap texmap0
[   0.182][d][vo/gpu/opengl] [ 21] vec2 pos = texcoord0;
[   0.182][d][vo/gpu/opengl] [ 22] vec2 size = texture_size0;
[   0.182][d][vo/gpu/opengl] [ 23] vec2 pt = pixel_size0;
[   0.182][d][vo/gpu/opengl] [ 24] color = vec4(0.0);
[   0.182][d][vo/gpu/opengl] [ 25] {
[   0.182][d][vo/gpu/opengl] [ 26] vec2 dir = vec2(1.0, 0.0);
[   0.182][d][vo/gpu/opengl] [ 27] pt *= dir;
[   0.182][d][vo/gpu/opengl] [ 28] float fcoord = dot(fract(pos * size - vec2(0.5)), dir);
[   0.182][d][vo/gpu/opengl] [ 29] vec2 base = pos - fcoord * pt - pt * vec2(2.0);
[   0.182][d][vo/gpu/opengl] [ 30] vec4 c;
[   0.182][d][vo/gpu/opengl] [ 31] float ypos = LUT_POS(fcoord, 64.0);
[   0.182][d][vo/gpu/opengl] [ 32] float weights[6];
[   0.182][d][vo/gpu/opengl] [ 33] c = texture(lut, vec2(0.250000, ypos));
[   0.182][d][vo/gpu/opengl] [ 34] weights[0] = c[0];
[   0.182][d][vo/gpu/opengl] [ 35] weights[1] = c[1];
[   0.182][d][vo/gpu/opengl] [ 36] weights[2] = c[2];
[   0.182][d][vo/gpu/opengl] [ 37] weights[3] = c[3];
[   0.182][d][vo/gpu/opengl] [ 38] c = texture(lut, vec2(0.750000, ypos));
[   0.182][d][vo/gpu/opengl] [ 39] weights[4] = c[0];
[   0.182][d][vo/gpu/opengl] [ 40] weights[5] = c[1];
[   0.182][d][vo/gpu/opengl] [ 41] // scaler samples
[   0.182][d][vo/gpu/opengl] [ 42] c = texture(tex, base + pt * vec2(0.0));
[   0.182][d][vo/gpu/opengl] [ 43] color += vec4(weights[0]) * c;
[   0.182][d][vo/gpu/opengl] [ 44] c = texture(tex, base + pt * vec2(1.0));
[   0.182][d][vo/gpu/opengl] [ 45] color += vec4(weights[1]) * c;
[   0.182][d][vo/gpu/opengl] [ 46] c = texture(tex, base + pt * vec2(2.0));
[   0.182][d][vo/gpu/opengl] [ 47] color += vec4(weights[2]) * c;
[   0.182][d][vo/gpu/opengl] [ 48] c = texture(tex, base + pt * vec2(3.0));
[   0.182][d][vo/gpu/opengl] [ 49] color += vec4(weights[3]) * c;
[   0.182][d][vo/gpu/opengl] [ 50] c = texture(tex, base + pt * vec2(4.0));
[   0.182][d][vo/gpu/opengl] [ 51] color += vec4(weights[4]) * c;
[   0.182][d][vo/gpu/opengl] [ 52] c = texture(tex, base + pt * vec2(5.0));
[   0.182][d][vo/gpu/opengl] [ 53] color += vec4(weights[5]) * c;
[   0.182][d][vo/gpu/opengl] [ 54] }
[   0.182][d][vo/gpu/opengl] [ 55] color.b = 0.000000;
[   0.182][d][vo/gpu/opengl] [ 56] color.a = 1.000000;
[   0.182][d][vo/gpu/opengl] [ 57] out_color = color;
[   0.182][d][vo/gpu/opengl] [ 58] }
[   0.182][d][vo/gpu/opengl] shader link log (status=1): 
[   0.182][d][vo/gpu] Resizing texture: 1920x1032
[   0.182][d][vo/gpu/opengl] vertex shader source:
[   0.182][d][vo/gpu/opengl] [  1] #version 440
[   0.182][d][vo/gpu/opengl] [  2] #define tex1D texture
[   0.182][d][vo/gpu/opengl] [  3] #define tex3D texture
[   0.182][d][vo/gpu/opengl] [  4] #define LUT_POS(x, lut_size) mix(0.5 / (lut_size), 1.0 - 0.5 / (lut_size), (x))
[   0.182][d][vo/gpu/opengl] [  5] in vec2 vertex_position;
[   0.182][d][vo/gpu/opengl] [  6] in vec2 vertex_texcoord0;
[   0.182][d][vo/gpu/opengl] [  7] out vec2 texcoord0;
[   0.182][d][vo/gpu/opengl] [  8] in vec2 vertex_texcoord1;
[   0.182][d][vo/gpu/opengl] [  9] out vec2 texcoord1;
[   0.182][d][vo/gpu/opengl] [ 10] void main() {
[   0.182][d][vo/gpu/opengl] [ 11] gl_Position = vec4(vertex_position, 1.0, 1.0);
[   0.182][d][vo/gpu/opengl] [ 12] texcoord0 = vertex_texcoord0;
[   0.182][d][vo/gpu/opengl] [ 13] texcoord1 = vertex_texcoord1;
[   0.182][d][vo/gpu/opengl] [ 14] }
[   0.182][d][vo/gpu/opengl] fragment shader source:
[   0.182][d][vo/gpu/opengl] [  1] #version 440
[   0.182][d][vo/gpu/opengl] [  2] #define tex1D texture
[   0.182][d][vo/gpu/opengl] [  3] #define tex3D texture
[   0.182][d][vo/gpu/opengl] [  4] #define LUT_POS(x, lut_size) mix(0.5 / (lut_size), 1.0 - 0.5 / (lut_size), (x))
[   0.182][d][vo/gpu/opengl] [  5] out vec4 out_color;
[   0.182][d][vo/gpu/opengl] [  6] in vec2 texcoord0;
[   0.182][d][vo/gpu/opengl] [  7] in vec2 texcoord1;
[   0.182][d][vo/gpu/opengl] [  8] layout(std140, binding=0) uniform UBO {
[   0.182][d][vo/gpu/opengl] [  9] layout(offset=0) mat3 colormatrix;
[   0.182][d][vo/gpu/opengl] [ 10] layout(offset=48) vec3 colormatrix_c;
[   0.182][d][vo/gpu/opengl] [ 11] layout(offset=64) vec2 texture_size0;
[   0.182][d][vo/gpu/opengl] [ 12] layout(offset=80) mat2 texture_rot0;
[   0.182][d][vo/gpu/opengl] [ 13] layout(offset=112) vec2 texture_off0;
[   0.182][d][vo/gpu/opengl] [ 14] layout(offset=120) vec2 pixel_size0;
[   0.182][d][vo/gpu/opengl] [ 15] layout(offset=128) vec2 texture_size1;
[   0.182][d][vo/gpu/opengl] [ 16] layout(offset=144) mat2 texture_rot1;
[   0.182][d][vo/gpu/opengl] [ 17] layout(offset=176) vec2 texture_off1;
[   0.182][d][vo/gpu/opengl] [ 18] layout(offset=184) vec2 pixel_size1;
[   0.182][d][vo/gpu/opengl] [ 19] };
[   0.182][d][vo/gpu/opengl] [ 20] uniform sampler2D texture0;
[   0.182][d][vo/gpu/opengl] [ 21] uniform sampler2D texture1;
[   0.182][d][vo/gpu/opengl] [ 22] void main() {
[   0.182][d][vo/gpu/opengl] [ 23] vec4 color = vec4(0.0, 0.0, 0.0, 1.0);
[   0.182][d][vo/gpu/opengl] [ 24] color.r = 1.000000 * vec4(texture(texture0, texcoord0)).r;
[   0.182][d][vo/gpu/opengl] [ 25] color.gb = 1.000000 * vec4(texture(texture1, texcoord1)).rg;
[   0.182][d][vo/gpu/opengl] [ 26] color = color.rgbr;
[   0.182][d][vo/gpu/opengl] [ 27] color.rgb = mat3(colormatrix) * color.rgb + colormatrix_c;
[   0.182][d][vo/gpu/opengl] [ 28] color.a = 1.0;
[   0.182][d][vo/gpu/opengl] [ 29] // scaler pre-conversion
[   0.182][d][vo/gpu/opengl] [ 30] // linearize
[   0.182][d][vo/gpu/opengl] [ 31] color.rgb = clamp(color.rgb, 0.0, 1.0);
[   0.182][d][vo/gpu/opengl] [ 32] color.rgb = pow(color.rgb, vec3(2.4));
[   0.182][d][vo/gpu/opengl] [ 33] color.rgb *= vec3(1.0/1.000000);
[   0.182][d][vo/gpu/opengl] [ 34] // main scaling
[   0.182][d][vo/gpu/opengl] [ 35] out_color = color;
[   0.182][d][vo/gpu/opengl] [ 36] }
[   0.182][d][vo/gpu/opengl] shader link log (status=1): 
[   0.185][d][vo/gpu] Resizing texture: 1920x722
[   0.185][d][vo/gpu/opengl] vertex shader source:
[   0.185][d][vo/gpu/opengl] [  1] #version 440
[   0.185][d][vo/gpu/opengl] [  2] #define tex1D texture
[   0.185][d][vo/gpu/opengl] [  3] #define tex3D texture
[   0.185][d][vo/gpu/opengl] [  4] #define LUT_POS(x, lut_size) mix(0.5 / (lut_size), 1.0 - 0.5 / (lut_size), (x))
[   0.185][d][vo/gpu/opengl] [  5] in vec2 vertex_position;
[   0.185][d][vo/gpu/opengl] [  6] in vec2 vertex_texcoord0;
[   0.185][d][vo/gpu/opengl] [  7] out vec2 texcoord0;
[   0.185][d][vo/gpu/opengl] [  8] void main() {
[   0.185][d][vo/gpu/opengl] [  9] gl_Position = vec4(vertex_position, 1.0, 1.0);
[   0.185][d][vo/gpu/opengl] [ 10] texcoord0 = vertex_texcoord0;
[   0.185][d][vo/gpu/opengl] [ 11] }
[   0.185][d][vo/gpu/opengl] fragment shader source:
[   0.185][d][vo/gpu/opengl] [  1] #version 440
[   0.185][d][vo/gpu/opengl] [  2] #define tex1D texture
[   0.185][d][vo/gpu/opengl] [  3] #define tex3D texture
[   0.185][d][vo/gpu/opengl] [  4] #define LUT_POS(x, lut_size) mix(0.5 / (lut_size), 1.0 - 0.5 / (lut_size), (x))
[   0.185][d][vo/gpu/opengl] [  5] out vec4 out_color;
[   0.185][d][vo/gpu/opengl] [  6] in vec2 texcoord0;
[   0.185][d][vo/gpu/opengl] [  7] layout(std140, binding=0) uniform UBO {
[   0.185][d][vo/gpu/opengl] [  8] layout(offset=0) vec2 texture_size0;
[   0.185][d][vo/gpu/opengl] [  9] layout(offset=16) mat2 texture_rot0;
[   0.185][d][vo/gpu/opengl] [ 10] layout(offset=48) vec2 texture_off0;
[   0.185][d][vo/gpu/opengl] [ 11] layout(offset=56) vec2 pixel_size0;
[   0.185][d][vo/gpu/opengl] [ 12] };
[   0.185][d][vo/gpu/opengl] [ 13] uniform sampler2D lut;
[   0.185][d][vo/gpu/opengl] [ 14] uniform sampler2D texture0;
[   0.185][d][vo/gpu/opengl] [ 15] void main() {
[   0.185][d][vo/gpu/opengl] [ 16] vec4 color = vec4(0.0, 0.0, 0.0, 1.0);
[   0.185][d][vo/gpu/opengl] [ 17] #undef tex
[   0.185][d][vo/gpu/opengl] [ 18] #undef texmap
[   0.185][d][vo/gpu/opengl] [ 19] #define tex texture0
[   0.185][d][vo/gpu/opengl] [ 20] #define texmap texmap0
[   0.185][d][vo/gpu/opengl] [ 21] vec2 pos = texcoord0;
[   0.185][d][vo/gpu/opengl] [ 22] vec2 size = texture_size0;
[   0.185][d][vo/gpu/opengl] [ 23] vec2 pt = pixel_size0;
[   0.185][d][vo/gpu/opengl] [ 24] // first pass
[   0.185][d][vo/gpu/opengl] [ 25] color = vec4(0.0);
[   0.185][d][vo/gpu/opengl] [ 26] {
[   0.185][d][vo/gpu/opengl] [ 27] vec2 dir = vec2(0.0, 1.0);
[   0.185][d][vo/gpu/opengl] [ 28] pt *= dir;
[   0.185][d][vo/gpu/opengl] [ 29] float fcoord = dot(fract(pos * size - vec2(0.5)), dir);
[   0.185][d][vo/gpu/opengl] [ 30] vec2 base = pos - fcoord * pt - pt * vec2(2.0);
[   0.185][d][vo/gpu/opengl] [ 31] vec4 c;
[   0.185][d][vo/gpu/opengl] [ 32] float ypos = LUT_POS(fcoord, 64.0);
[   0.185][d][vo/gpu/opengl] [ 33] float weights[6];
[   0.185][d][vo/gpu/opengl] [ 34] c = texture(lut, vec2(0.250000, ypos));
[   0.185][d][vo/gpu/opengl] [ 35] weights[0] = c[0];
[   0.185][d][vo/gpu/opengl] [ 36] weights[1] = c[1];
[   0.185][d][vo/gpu/opengl] [ 37] weights[2] = c[2];
[   0.185][d][vo/gpu/opengl] [ 38] weights[3] = c[3];
[   0.185][d][vo/gpu/opengl] [ 39] c = texture(lut, vec2(0.750000, ypos));
[   0.185][d][vo/gpu/opengl] [ 40] weights[4] = c[0];
[   0.185][d][vo/gpu/opengl] [ 41] weights[5] = c[1];
[   0.185][d][vo/gpu/opengl] [ 42] // scaler samples
[   0.185][d][vo/gpu/opengl] [ 43] c = texture(tex, base + pt * vec2(0.0));
[   0.185][d][vo/gpu/opengl] [ 44] color += vec4(weights[0]) * c;
[   0.185][d][vo/gpu/opengl] [ 45] c = texture(tex, base + pt * vec2(1.0));
[   0.185][d][vo/gpu/opengl] [ 46] color += vec4(weights[1]) * c;
[   0.185][d][vo/gpu/opengl] [ 47] c = texture(tex, base + pt * vec2(2.0));
[   0.185][d][vo/gpu/opengl] [ 48] color += vec4(weights[2]) * c;
[   0.185][d][vo/gpu/opengl] [ 49] c = texture(tex, base + pt * vec2(3.0));
[   0.185][d][vo/gpu/opengl] [ 50] color += vec4(weights[3]) * c;
[   0.185][d][vo/gpu/opengl] [ 51] c = texture(tex, base + pt * vec2(4.0));
[   0.185][d][vo/gpu/opengl] [ 52] color += vec4(weights[4]) * c;
[   0.185][d][vo/gpu/opengl] [ 53] c = texture(tex, base + pt * vec2(5.0));
[   0.185][d][vo/gpu/opengl] [ 54] color += vec4(weights[5]) * c;
[   0.185][d][vo/gpu/opengl] [ 55] }
[   0.185][d][vo/gpu/opengl] [ 56] color *= 1.000000;
[   0.185][d][vo/gpu/opengl] [ 57] out_color = color;
[   0.185][d][vo/gpu/opengl] [ 58] }
[   0.185][d][vo/gpu/opengl] shader link log (status=1): 
[   0.186][v][vo/gpu] Dither to 10.
[   0.230][d][vo/gpu/opengl] vertex shader source:
[   0.230][d][vo/gpu/opengl] [  1] #version 440
[   0.230][d][vo/gpu/opengl] [  2] #define tex1D texture
[   0.230][d][vo/gpu/opengl] [  3] #define tex3D texture
[   0.230][d][vo/gpu/opengl] [  4] #define LUT_POS(x, lut_size) mix(0.5 / (lut_size), 1.0 - 0.5 / (lut_size), (x))
[   0.230][d][vo/gpu/opengl] [  5] in vec2 vertex_position;
[   0.230][d][vo/gpu/opengl] [  6] in vec2 vertex_texcoord0;
[   0.230][d][vo/gpu/opengl] [  7] out vec2 texcoord0;
[   0.230][d][vo/gpu/opengl] [  8] void main() {
[   0.230][d][vo/gpu/opengl] [  9] gl_Position = vec4(vertex_position, 1.0, 1.0);
[   0.230][d][vo/gpu/opengl] [ 10] texcoord0 = vertex_texcoord0;
[   0.230][d][vo/gpu/opengl] [ 11] }
[   0.230][d][vo/gpu/opengl] fragment shader source:
[   0.230][d][vo/gpu/opengl] [  1] #version 440
[   0.230][d][vo/gpu/opengl] [  2] #define tex1D texture
[   0.230][d][vo/gpu/opengl] [  3] #define tex3D texture
[   0.230][d][vo/gpu/opengl] [  4] #define LUT_POS(x, lut_size) mix(0.5 / (lut_size), 1.0 - 0.5 / (lut_size), (x))
[   0.230][d][vo/gpu/opengl] [  5] out vec4 out_color;
[   0.230][d][vo/gpu/opengl] [  6] in vec2 texcoord0;
[   0.230][d][vo/gpu/opengl] [  7] layout(std140, binding=0) uniform UBO {
[   0.230][d][vo/gpu/opengl] [  8] layout(offset=0) vec3 src_luma;
[   0.230][d][vo/gpu/opengl] [  9] layout(offset=16) vec3 dst_luma;
[   0.230][d][vo/gpu/opengl] [ 10] layout(offset=32) vec2 texture_size0;
[   0.230][d][vo/gpu/opengl] [ 11] layout(offset=48) mat2 texture_rot0;
[   0.230][d][vo/gpu/opengl] [ 12] layout(offset=80) vec2 texture_off0;
[   0.230][d][vo/gpu/opengl] [ 13] layout(offset=88) vec2 pixel_size0;
[   0.230][d][vo/gpu/opengl] [ 14] };
[   0.230][d][vo/gpu/opengl] [ 15] uniform sampler2D lut;
[   0.230][d][vo/gpu/opengl] [ 16] uniform sampler2D dither;
[   0.230][d][vo/gpu/opengl] [ 17] uniform sampler2D texture0;
[   0.230][d][vo/gpu/opengl] [ 18] void main() {
[   0.230][d][vo/gpu/opengl] [ 19] vec4 color = vec4(0.0, 0.0, 0.0, 1.0);
[   0.230][d][vo/gpu/opengl] [ 20] #undef tex
[   0.230][d][vo/gpu/opengl] [ 21] #undef texmap
[   0.230][d][vo/gpu/opengl] [ 22] #define tex texture0
[   0.230][d][vo/gpu/opengl] [ 23] #define texmap texmap0
[   0.230][d][vo/gpu/opengl] [ 24] vec2 pos = texcoord0;
[   0.230][d][vo/gpu/opengl] [ 25] vec2 size = texture_size0;
[   0.230][d][vo/gpu/opengl] [ 26] vec2 pt = pixel_size0;
[   0.230][d][vo/gpu/opengl] [ 27] color = vec4(0.0);
[   0.230][d][vo/gpu/opengl] [ 28] {
[   0.230][d][vo/gpu/opengl] [ 29] vec2 dir = vec2(1.0, 0.0);
[   0.230][d][vo/gpu/opengl] [ 30] pt *= dir;
[   0.230][d][vo/gpu/opengl] [ 31] float fcoord = dot(fract(pos * size - vec2(0.5)), dir);
[   0.230][d][vo/gpu/opengl] [ 32] vec2 base = pos - fcoord * pt - pt * vec2(2.0);
[   0.230][d][vo/gpu/opengl] [ 33] vec4 c;
[   0.230][d][vo/gpu/opengl] [ 34] float ypos = LUT_POS(fcoord, 64.0);
[   0.230][d][vo/gpu/opengl] [ 35] float weights[6];
[   0.230][d][vo/gpu/opengl] [ 36] c = texture(lut, vec2(0.250000, ypos));
[   0.230][d][vo/gpu/opengl] [ 37] weights[0] = c[0];
[   0.231][d][vo/gpu/opengl] [ 38] weights[1] = c[1];
[   0.231][d][vo/gpu/opengl] [ 39] weights[2] = c[2];
[   0.231][d][vo/gpu/opengl] [ 40] weights[3] = c[3];
[   0.231][d][vo/gpu/opengl] [ 41] c = texture(lut, vec2(0.750000, ypos));
[   0.231][d][vo/gpu/opengl] [ 42] weights[4] = c[0];
[   0.231][d][vo/gpu/opengl] [ 43] weights[5] = c[1];
[   0.231][d][vo/gpu/opengl] [ 44] // scaler samples
[   0.231][d][vo/gpu/opengl] [ 45] c = texture(tex, base + pt * vec2(0.0));
[   0.231][d][vo/gpu/opengl] [ 46] color += vec4(weights[0]) * c;
[   0.231][d][vo/gpu/opengl] [ 47] c = texture(tex, base + pt * vec2(1.0));
[   0.231][d][vo/gpu/opengl] [ 48] color += vec4(weights[1]) * c;
[   0.231][d][vo/gpu/opengl] [ 49] c = texture(tex, base + pt * vec2(2.0));
[   0.231][d][vo/gpu/opengl] [ 50] color += vec4(weights[2]) * c;
[   0.231][d][vo/gpu/opengl] [ 51] c = texture(tex, base + pt * vec2(3.0));
[   0.231][d][vo/gpu/opengl] [ 52] color += vec4(weights[3]) * c;
[   0.231][d][vo/gpu/opengl] [ 53] c = texture(tex, base + pt * vec2(4.0));
[   0.231][d][vo/gpu/opengl] [ 54] color += vec4(weights[4]) * c;
[   0.231][d][vo/gpu/opengl] [ 55] c = texture(tex, base + pt * vec2(5.0));
[   0.231][d][vo/gpu/opengl] [ 56] color += vec4(weights[5]) * c;
[   0.231][d][vo/gpu/opengl] [ 57] }
[   0.231][d][vo/gpu/opengl] [ 58] color.a = 1.000000;
[   0.231][d][vo/gpu/opengl] [ 59] // scaler post-conversion
[   0.231][d][vo/gpu/opengl] [ 60] // color mapping
[   0.231][d][vo/gpu/opengl] [ 61] color.rgb *= vec3(1.000000);
[   0.231][d][vo/gpu/opengl] [ 62] color.rgb *= vec3(1.000000);
[   0.231][d][vo/gpu/opengl] [ 63] // delinearize
[   0.231][d][vo/gpu/opengl] [ 64] color.rgb = clamp(color.rgb, 0.0, 1.0);
[   0.231][d][vo/gpu/opengl] [ 65] color.rgb *= vec3(1.000000);
[   0.231][d][vo/gpu/opengl] [ 66] color.rgb = pow(color.rgb, vec3(1.0/2.4));
[   0.231][d][vo/gpu/opengl] [ 67] // dithering
[   0.231][d][vo/gpu/opengl] [ 68] vec2 dither_pos = gl_FragCoord.xy * 1.0/64.0;
[   0.231][d][vo/gpu/opengl] [ 69] float dither_value = texture(dither, dither_pos).r;
[   0.231][d][vo/gpu/opengl] [ 70] color = floor(color * 1023.0 + dither_value + 0.5 / 4096.0) * 1.0/1023.0;
[   0.231][d][vo/gpu/opengl] [ 71] out_color = color;
[   0.231][d][vo/gpu/opengl] [ 72] }
[   0.231][d][vo/gpu/opengl] shader link log (status=1): 
[   0.232][v][vo/gpu/wayland] Given DND offer with mime type text/plain;charset=utf-8
[   0.233][v][cplayer] first video frame after restart shown
[   0.234][d][vo/gpu] Resizing texture: 1344x722
[   0.235][v][cplayer] audio ready
[   0.235][d][cplayer] starting video playback
[   0.235][v][cplayer] starting audio playback
[   0.235][v][cplayer] playback restart complete @ 0.000000, audio=playing, video=playing (paused)
[   0.235][d][cplayer] Run command: change-list, flags=64, args=[name="shared-script-properties", operation="append", value="osc-margins=0.000000,0.000000,0.000000,0.000000"]
[   0.235][v][cplayer] Set property: shared-script-properties -> 1
[   0.235][d][vo/gpu/opengl] vertex shader source:
[   0.235][d][vo/gpu/opengl] [  1] #version 440
[   0.236][d][vo/gpu/opengl] [  2] #define tex1D texture
[   0.236][d][vo/gpu/opengl] [  3] #define tex3D texture
[   0.236][d][vo/gpu/opengl] [  4] #define LUT_POS(x, lut_size) mix(0.5 / (lut_size), 1.0 - 0.5 / (lut_size), (x))
[   0.236][d][vo/gpu/opengl] [  5] in vec2 vertex_position;
[   0.236][d][vo/gpu/opengl] [  6] in vec2 vertex_texcoord0;
[   0.236][d][vo/gpu/opengl] [  7] out vec2 texcoord0;
[   0.236][d][vo/gpu/opengl] [  8] void main() {
[   0.236][d][vo/gpu/opengl] [  9] gl_Position = vec4(vertex_position, 1.0, 1.0);
[   0.236][d][vo/gpu/opengl] [ 10] texcoord0 = vertex_texcoord0;
[   0.236][d][vo/gpu/opengl] [ 11] }
[   0.236][d][vo/gpu/opengl] fragment shader source:
[   0.236][d][vo/gpu/opengl] [  1] #version 440
[   0.236][d][vo/gpu/opengl] [  2] #define tex1D texture
[   0.236][d][vo/gpu/opengl] [  3] #define tex3D texture
[   0.236][d][vo/gpu/opengl] [  4] #define LUT_POS(x, lut_size) mix(0.5 / (lut_size), 1.0 - 0.5 / (lut_size), (x))
[   0.236][d][vo/gpu/opengl] [  5] out vec4 out_color;
[   0.236][d][vo/gpu/opengl] [  6] in vec2 texcoord0;
[   0.236][d][vo/gpu/opengl] [  7] layout(std140, binding=0) uniform UBO {
[   0.236][d][vo/gpu/opengl] [  8] layout(offset=0) vec3 src_luma;
[   0.236][d][vo/gpu/opengl] [  9] layout(offset=16) vec3 dst_luma;
[   0.236][d][vo/gpu/opengl] [ 10] layout(offset=32) vec2 texture_size0;
[   0.236][d][vo/gpu/opengl] [ 11] layout(offset=48) mat2 texture_rot0;
[   0.236][d][vo/gpu/opengl] [ 12] layout(offset=80) vec2 texture_off0;
[   0.236][d][vo/gpu/opengl] [ 13] layout(offset=88) vec2 pixel_size0;
[   0.236][d][vo/gpu/opengl] [ 14] };
[   0.236][d][vo/gpu/opengl] [ 15] uniform sampler2D lut;
[   0.236][d][vo/gpu/opengl] [ 16] uniform sampler2D dither;
[   0.236][d][vo/gpu/opengl] [ 17] uniform sampler2D texture0;
[   0.236][d][vo/gpu/opengl] [ 18] void main() {
[   0.236][d][vo/gpu/opengl] [ 19] vec4 color = vec4(0.0, 0.0, 0.0, 1.0);
[   0.236][d][vo/gpu/opengl] [ 20] #undef tex
[   0.236][d][vo/gpu/opengl] [ 21] #undef texmap
[   0.236][d][vo/gpu/opengl] [ 22] #define tex texture0
[   0.236][d][vo/gpu/opengl] [ 23] #define texmap texmap0
[   0.236][d][vo/gpu/opengl] [ 24] vec2 pos = texcoord0;
[   0.236][d][vo/gpu/opengl] [ 25] vec2 size = texture_size0;
[   0.236][d][vo/gpu/opengl] [ 26] vec2 pt = pixel_size0;
[   0.236][d][vo/gpu/opengl] [ 27] color = vec4(0.0);
[   0.236][d][vo/gpu/opengl] [ 28] {
[   0.236][d][vo/gpu/opengl] [ 29] vec2 dir = vec2(1.0, 0.0);
[   0.236][d][vo/gpu/opengl] [ 30] pt *= dir;
[   0.236][d][vo/gpu/opengl] [ 31] float fcoord = dot(fract(pos * size - vec2(0.5)), dir);
[   0.236][d][vo/gpu/opengl] [ 32] vec2 base = pos - fcoord * pt - pt * vec2(2.0);
[   0.236][d][vo/gpu/opengl] [ 33] vec4 c;
[   0.236][d][vo/gpu/opengl] [ 34] float ypos = LUT_POS(fcoord, 64.0);
[   0.236][d][vo/gpu/opengl] [ 35] float weights[6];
[   0.236][d][vo/gpu/opengl] [ 36] c = texture(lut, vec2(0.250000, ypos));
[   0.236][d][vo/gpu/opengl] [ 37] weights[0] = c[0];
[   0.236][d][vo/gpu/opengl] [ 38] weights[1] = c[1];
[   0.236][d][vo/gpu/opengl] [ 39] weights[2] = c[2];
[   0.236][d][vo/gpu/opengl] [ 40] weights[3] = c[3];
[   0.236][d][vo/gpu/opengl] [ 41] c = texture(lut, vec2(0.750000, ypos));
[   0.236][d][vo/gpu/opengl] [ 42] weights[4] = c[0];
[   0.236][d][vo/gpu/opengl] [ 43] weights[5] = c[1];
[   0.236][d][vo/gpu/opengl] [ 44] // scaler samples
[   0.236][d][vo/gpu/opengl] [ 45] c = texture(tex, base + pt * vec2(0.0));
[   0.236][d][vo/gpu/opengl] [ 46] color += vec4(weights[0]) * c;
[   0.236][d][vo/gpu/opengl] [ 47] c = texture(tex, base + pt * vec2(1.0));
[   0.236][d][vo/gpu/opengl] [ 48] color += vec4(weights[1]) * c;
[   0.236][d][vo/gpu/opengl] [ 49] c = texture(tex, base + pt * vec2(2.0));
[   0.236][d][vo/gpu/opengl] [ 50] color += vec4(weights[2]) * c;
[   0.236][d][vo/gpu/opengl] [ 51] c = texture(tex, base + pt * vec2(3.0));
[   0.236][d][vo/gpu/opengl] [ 52] color += vec4(weights[3]) * c;
[   0.236][d][vo/gpu/opengl] [ 53] c = texture(tex, base + pt * vec2(4.0));
[   0.236][d][vo/gpu/opengl] [ 54] color += vec4(weights[4]) * c;
[   0.236][d][vo/gpu/opengl] [ 55] c = texture(tex, base + pt * vec2(5.0));
[   0.236][d][vo/gpu/opengl] [ 56] color += vec4(weights[5]) * c;
[   0.236][d][vo/gpu/opengl] [ 57] }
[   0.236][d][vo/gpu/opengl] [ 58] color.a = 1.000000;
[   0.236][d][vo/gpu/opengl] [ 59] // scaler post-conversion
[   0.236][d][vo/gpu/opengl] [ 60] // color mapping
[   0.236][d][vo/gpu/opengl] [ 61] color.rgb *= vec3(1.000000);
[   0.236][d][vo/gpu/opengl] [ 62] color.rgb *= vec3(1.000000);
[   0.236][d][vo/gpu/opengl] [ 63] // delinearize
[   0.236][d][vo/gpu/opengl] [ 64] color.rgb = clamp(color.rgb, 0.0, 1.0);
[   0.236][d][vo/gpu/opengl] [ 65] color.rgb *= vec3(1.000000);
[   0.236][d][vo/gpu/opengl] [ 66] color.rgb = pow(color.rgb, vec3(1.0/2.4));
[   0.236][d][vo/gpu/opengl] [ 67] // dithering
[   0.236][d][vo/gpu/opengl] [ 68] vec2 dither_pos = gl_FragCoord.xy * 1.0/64.0;
[   0.236][d][vo/gpu/opengl] [ 69] float dither_value = texture(dither, dither_pos).r;
[   0.236][d][vo/gpu/opengl] [ 70] color = floor(color * 1023.0 + dither_value + 0.5 / 4096.0) * 1.0/1023.0;
[   0.236][d][vo/gpu/opengl] [ 71] out_color = color;
[   0.236][d][vo/gpu/opengl] [ 72] }
[   0.236][d][osc] osc_init 
[   0.236][d][vo/gpu/opengl] shader link log (status=1): 
[   0.236][d][cplayer] Run command: change-list, flags=64, args=[name="shared-script-properties", operation="append", value="osc-margins=0.000000,0.000000,0.000000,0.000000"]
[   0.236][v][cplayer] Set property: shared-script-properties -> 1
[   0.239][v][vo/gpu/wayland] Surface entered output Dell Inc. DELL P2317H (0x2e), scale = 1
[   0.248][v][vo/gpu] Assuming 60.000000 FPS for display sync.
[   3.959][d][cplayer] Run command: change-list, flags=64, args=[name="shared-script-properties", operation="append", value="osc-margins=0.000000,0.000000,0.000000,0.000000"]
[   3.959][v][cplayer] Set property: shared-script-properties -> 1
[   3.960][d][cplayer] Run command: enable-section, flags=64, args=[name="input", flags=""]
[   3.962][v][osd/libass] fontselect: (sans-serif, 400, 0) -> /usr/share/fonts/noto/NotoSans-Regular.ttf, 0, NotoSans-Regular
[   3.965][v][osd/libass] fontselect: (mpv-osd-symbols, 400, 0) -> mpv-osd-symbols-Regular, 0, mpv-osd-symbols-Regular
[   3.968][v][vo/gpu] Reallocating OSD texture to 2048x256.
[   3.968][d][vo/gpu/opengl] vertex shader source:
[   3.968][d][vo/gpu/opengl] [  1] #version 440
[   3.968][d][vo/gpu/opengl] [  2] #define tex1D texture
[   3.968][d][vo/gpu/opengl] [  3] #define tex3D texture
[   3.968][d][vo/gpu/opengl] [  4] #define LUT_POS(x, lut_size) mix(0.5 / (lut_size), 1.0 - 0.5 / (lut_size), (x))
[   3.968][d][vo/gpu/opengl] [  5] in vec2 vertex_position;
[   3.968][d][vo/gpu/opengl] [  6] in vec2 vertex_texcoord;
[   3.968][d][vo/gpu/opengl] [  7] out vec2 texcoord;
[   3.968][d][vo/gpu/opengl] [  8] in vec4 vertex_ass_color;
[   3.968][d][vo/gpu/opengl] [  9] out vec4 ass_color;
[   3.968][d][vo/gpu/opengl] [ 10] void main() {
[   3.968][d][vo/gpu/opengl] [ 11] gl_Position = vec4(vertex_position, 1.0, 1.0);
[   3.968][d][vo/gpu/opengl] [ 12] texcoord = vertex_texcoord;
[   3.968][d][vo/gpu/opengl] [ 13] ass_color = vertex_ass_color;
[   3.968][d][vo/gpu/opengl] [ 14] }
[   3.968][d][vo/gpu/opengl] fragment shader source:
[   3.968][d][vo/gpu/opengl] [  1] #version 440
[   3.968][d][vo/gpu/opengl] [  2] #define tex1D texture
[   3.968][d][vo/gpu/opengl] [  3] #define tex3D texture
[   3.968][d][vo/gpu/opengl] [  4] #define LUT_POS(x, lut_size) mix(0.5 / (lut_size), 1.0 - 0.5 / (lut_size), (x))
[   3.968][d][vo/gpu/opengl] [  5] out vec4 out_color;
[   3.968][d][vo/gpu/opengl] [  6] in vec2 texcoord;
[   3.968][d][vo/gpu/opengl] [  7] in vec4 ass_color;
[   3.968][d][vo/gpu/opengl] [  8] layout(std140, binding=0) uniform UBO {
[   3.968][d][vo/gpu/opengl] [  9] layout(offset=0) vec3 src_luma;
[   3.968][d][vo/gpu/opengl] [ 10] layout(offset=16) vec3 dst_luma;
[   3.968][d][vo/gpu/opengl] [ 11] };
[   3.968][d][vo/gpu/opengl] [ 12] uniform sampler2D osdtex;
[   3.968][d][vo/gpu/opengl] [ 13] void main() {
[   3.968][d][vo/gpu/opengl] [ 14] vec4 color = vec4(0.0, 0.0, 0.0, 1.0);
[   3.968][d][vo/gpu/opengl] [ 15] color = vec4(ass_color.rgb, ass_color.a * texture(osdtex, texcoord).r);
[   3.968][d][vo/gpu/opengl] [ 16] // color mapping
[   3.968][d][vo/gpu/opengl] [ 17] color.rgb *= vec3(1.000000);
[   3.968][d][vo/gpu/opengl] [ 18] color.rgb *= vec3(1.000000);
[   3.968][d][vo/gpu/opengl] [ 19] out_color = color;
[   3.968][d][vo/gpu/opengl] [ 20] }
[   3.969][d][vo/gpu/opengl] shader link log (status=1): 
[   4.741][d][cplayer] Run command: cycle, flags=73, args=[name="pause", value="1.000000"]
[   4.741][v][cplayer] Set property: pause -> 1
[   4.741][v][vo/gpu/wayland] Enabling idle inhibitor
[   4.741][v][ao/pulse] starting AO
[   5.772][d][cplayer] Run command: script-binding, flags=73, args=[name="osc/__keybinding4"]
[   5.893][v][vo/gpu/wayland] Surface entered output Sony SONY TV (0x2f), scale = 1
[   5.996][d][cplayer] Run command: change-list, flags=64, args=[name="shared-script-properties", operation="append", value="osc-margins=0.000000,0.000000,0.000000,0.000000"]
[   5.996][v][cplayer] Set property: shared-script-properties -> 1
[   5.996][d][cplayer] Run command: disable-section, flags=64, args=[name="input"]
[   6.460][d][cplayer] Run command: change-list, flags=64, args=[name="shared-script-properties", operation="append", value="osc-margins=0.000000,0.000000,0.000000,0.000000"]
[   6.460][v][cplayer] Set property: shared-script-properties -> 1
[   6.481][d][cplayer] Run command: enable-section, flags=64, args=[name="input", flags=""]
[   7.420][d][cplayer] Run command: script-binding, flags=73, args=[name="osc/__keybinding2"]
[   7.420][d][cplayer] Run command: cycle, flags=73, args=[name="deinterlace", value="1.000000"]
[   7.420][v][cplayer] Set property: deinterlace -> 1
[   7.421][v][vd] Decoder format: 1920x1032 vaapi[nv12] auto/auto/auto/auto/auto CL=mpeg2/4/h264
[   7.421][v][vd] Using container aspect ratio.
[   7.426][i][autoconvert] HW-downloading from vaapi
[   7.434][d][global] config path: 'fonts' -/-> '/home/nero/.config/mpv/fonts'
[   7.434][d][global] config path: 'fonts' -/-> '/home/nero/.mpv/fonts'
[   7.434][d][global] config path: 'fonts' -/-> '/etc/mpv/fonts'
[   7.434][d][osd/libass] ASS library version: 0x1500000 (runtime 0x1502000)
[   7.434][v][osd/libass] libass API version: 0x1502000
[   7.434][v][osd/libass] libass source: tarball: 0.15.2
[   7.434][v][osd/libass] Shaper: FriBidi 1.0.10 (SIMPLE) HarfBuzz-ng 2.9.1 (COMPLEX)
[   7.434][d][global] config path: 'subfont.ttf' -/-> '/home/nero/.config/mpv/subfont.ttf'
[   7.434][d][global] config path: 'subfont.ttf' -/-> '/home/nero/.mpv/subfont.ttf'
[   7.434][d][global] config path: 'subfont.ttf' -/-> '/etc/mpv/subfont.ttf'
[   7.434][d][global] config path: 'fonts.conf' -/-> '/home/nero/.config/mpv/fonts.conf'
[   7.434][d][global] config path: 'fonts.conf' -/-> '/home/nero/.mpv/fonts.conf'
[   7.434][d][global] config path: 'fonts.conf' -/-> '/etc/mpv/fonts.conf'
[   7.434][v][osd/libass] Setting up fonts...
[   7.438][d][ffmpeg] mpv_src_default_in: w:1920 h:1032 pixfmt:nv12 tb:1/1000000 fr:392391/16366 sar:1/1
[   7.439][d][ffmpeg] auto_scaler_0: w:iw h:ih flags:'bilinear' interl:0
[   7.440][d][ffmpeg] filter: auto-inserting filter 'auto_scaler_0' between the filter 'mpv_src_default_in' and the filter 'filter'
[   7.443][d][ffmpeg] auto_scaler_0: w:1920 h:1032 fmt:nv12 sar:1/1 -> w:1920 h:1032 fmt:yuv420p sar:1/1 flags:0x2
[   7.454][v][osd/libass] Using font provider fontconfig
[   7.454][v][osd/libass] Done.
[   7.457][v][osd/libass] fontselect: (sans-serif, 400, 0) -> /usr/share/fonts/noto/NotoSans-Regular.ttf, 0, NotoSans-Regular
[   7.461][v][vo/gpu] Reallocating OSD texture to 512x128.
[   7.475][v][vf] [userdeint] (enabled)
[   7.476][v][vf] [autorotate] 1920x1032 yuv420p bt.709/bt.709/bt.1886/limited/display SP=1.000000 CL=mpeg2/4/h264
[   7.476][v][vf] [convert] 1920x1032 yuv420p bt.709/bt.709/bt.1886/limited/display SP=1.000000 CL=mpeg2/4/h264
[   7.476][v][vf] [out] 1920x1032 yuv420p bt.709/bt.709/bt.1886/limited/display SP=1.000000 CL=mpeg2/4/h264
[   7.546][i][cplayer] VO: [gpu] 1920x1032 yuv420p
[   7.546][v][cplayer] VO: Description: Shader-based GPU Renderer
[   7.546][v][vo/gpu] reconfig to 1920x1032 yuv420p bt.709/bt.709/bt.1886/limited/display SP=1.000000 CL=mpeg2/4/h264
[   7.546][v][vo/gpu/wayland] Reconfiguring!
[   7.546][d][vo/gpu] screen size: 1920x1080
[   7.546][v][vo/gpu] Resize: 1344x722
[   7.546][v][vo/gpu] Window size: 1344x722 (Borders: l=0 t=0 r=0 b=0)
[   7.546][v][vo/gpu] Video source: 1920x1032 (1:1)
[   7.546][v][vo/gpu] Video display: (0, 0) 1920x1032 -> (0, 0) 1343x722
[   7.546][v][vo/gpu] Video scale: 0.699479/0.699612
[   7.546][v][vo/gpu] OSD borders: l=0 t=0 r=1 b=0
[   7.546][v][vo/gpu] Video borders: l=0 t=0 r=1 b=0
[   7.546][v][vo/gpu] Reported display depth: 10
[   7.546][v][vo/gpu] Texture for plane 0: 1920x1032
[   7.546][v][vo/gpu] Texture for plane 1: 960x516
[   7.547][v][vo/gpu] Texture for plane 2: 960x516
[   7.547][v][vo/gpu] Testing FBO format rgba16f
[   7.547][d][vo/gpu] Resizing texture: 16x16
[   7.547][v][vo/gpu] Using FBO format rgba16f.
[   7.547][v][vo/gpu/wayland] Handling resize on the egl side
[   7.547][v][vo/gpu] Resize: 1344x722
[   7.547][v][vo/gpu] Window size: 1344x722 (Borders: l=0 t=0 r=0 b=0)
[   7.547][v][vo/gpu] Video source: 1920x1032 (1:1)
[   7.547][v][vo/gpu] Video display: (0, 0) 1920x1032 -> (0, 0) 1343x722
[   7.547][v][vo/gpu] Video scale: 0.699479/0.699612
[   7.547][v][vo/gpu] OSD borders: l=0 t=0 r=1 b=0
[   7.547][v][vo/gpu] Video borders: l=0 t=0 r=1 b=0
[   7.547][v][vo/gpu] Reported display depth: 10
[   7.550][d][vo/gpu] Resizing texture: 960x516
[   7.552][d][vo/gpu/opengl] vertex shader source:
[   7.552][d][vo/gpu/opengl] [  1] #version 440
[   7.552][d][vo/gpu/opengl] [  2] #define tex1D texture
[   7.552][d][vo/gpu/opengl] [  3] #define tex3D texture
[   7.552][d][vo/gpu/opengl] [  4] #define LUT_POS(x, lut_size) mix(0.5 / (lut_size), 1.0 - 0.5 / (lut_size), (x))
[   7.552][d][vo/gpu/opengl] [  5] in vec2 vertex_position;
[   7.552][d][vo/gpu/opengl] [  6] in vec2 vertex_texcoord0;
[   7.552][d][vo/gpu/opengl] [  7] out vec2 texcoord0;
[   7.552][d][vo/gpu/opengl] [  8] in vec2 vertex_texcoord1;
[   7.552][d][vo/gpu/opengl] [  9] out vec2 texcoord1;
[   7.552][d][vo/gpu/opengl] [ 10] void main() {
[   7.552][d][vo/gpu/opengl] [ 11] gl_Position = vec4(vertex_position, 1.0, 1.0);
[   7.552][d][vo/gpu/opengl] [ 12] texcoord0 = vertex_texcoord0;
[   7.552][d][vo/gpu/opengl] [ 13] texcoord1 = vertex_texcoord1;
[   7.552][d][vo/gpu/opengl] [ 14] }
[   7.552][d][vo/gpu/opengl] fragment shader source:
[   7.552][d][vo/gpu/opengl] [  1] #version 440
[   7.552][d][vo/gpu/opengl] [  2] #define tex1D texture
[   7.552][d][vo/gpu/opengl] [  3] #define tex3D texture
[   7.552][d][vo/gpu/opengl] [  4] #define LUT_POS(x, lut_size) mix(0.5 / (lut_size), 1.0 - 0.5 / (lut_size), (x))
[   7.552][d][vo/gpu/opengl] [  5] out vec4 out_color;
[   7.552][d][vo/gpu/opengl] [  6] in vec2 texcoord0;
[   7.552][d][vo/gpu/opengl] [  7] in vec2 texcoord1;
[   7.552][d][vo/gpu/opengl] [  8] layout(std140, binding=0) uniform UBO {
[   7.552][d][vo/gpu/opengl] [  9] layout(offset=0) vec2 texture_size0;
[   7.552][d][vo/gpu/opengl] [ 10] layout(offset=16) mat2 texture_rot0;
[   7.552][d][vo/gpu/opengl] [ 11] layout(offset=48) vec2 texture_off0;
[   7.552][d][vo/gpu/opengl] [ 12] layout(offset=56) vec2 pixel_size0;
[   7.552][d][vo/gpu/opengl] [ 13] layout(offset=64) vec2 texture_size1;
[   7.552][d][vo/gpu/opengl] [ 14] layout(offset=80) mat2 texture_rot1;
[   7.552][d][vo/gpu/opengl] [ 15] layout(offset=112) vec2 texture_off1;
[   7.553][d][vo/gpu/opengl] [ 16] layout(offset=120) vec2 pixel_size1;
[   7.553][d][vo/gpu/opengl] [ 17] };
[   7.553][d][vo/gpu/opengl] [ 18] uniform sampler2D texture0;
[   7.553][d][vo/gpu/opengl] [ 19] uniform sampler2D texture1;
[   7.553][d][vo/gpu/opengl] [ 20] void main() {
[   7.553][d][vo/gpu/opengl] [ 21] vec4 color = vec4(0.0, 0.0, 0.0, 1.0);
[   7.553][d][vo/gpu/opengl] [ 22] // merging plane 1 ...
[   7.553][d][vo/gpu/opengl] [ 23] color.r = 1.000000 * vec4(texture(texture0, texcoord0)).r;
[   7.553][d][vo/gpu/opengl] [ 24] // merging plane 2 ... into 1
[   7.553][d][vo/gpu/opengl] [ 25] color.g = 1.000000 * vec4(texture(texture1, texcoord1)).r;
[   7.553][d][vo/gpu/opengl] [ 26] out_color = color;
[   7.553][d][vo/gpu/opengl] [ 27] }
[   7.555][d][vo/gpu/opengl] shader link log (status=1): 
[   7.555][d][vo/gpu] Resizing texture: 1920x1032
[   7.562][d][vo/gpu] Resizing texture: 960x516
[   7.563][d][vo/gpu] Resizing texture: 960x1032
[   7.563][d][vo/gpu] Resizing texture: 1920x1032
[   7.564][d][vo/gpu] Resizing texture: 1920x1032
[   7.567][d][vo/gpu] Resizing texture: 1920x722
[   7.568][v][vo/gpu] Dither to 10.
[   7.712][d][cplayer] Run command: change-list, flags=64, args=[name="shared-script-properties", operation="append", value="osc-margins=0.000000,0.000000,0.000000,0.000000"]
[   7.713][v][cplayer] Set property: shared-script-properties -> 1
[   7.729][d][cplayer] Run command: disable-section, flags=64, args=[name="input"]
[   8.350][d][cplayer] Run command: cycle, flags=73, args=[name="deinterlace", value="1.000000"]
[   8.351][v][cplayer] Set property: deinterlace -> 1
[   8.358][v][vd] Decoder format: 1920x1032 vaapi[nv12] auto/auto/auto/auto/auto CL=mpeg2/4/h264
[   8.358][v][vd] Using container aspect ratio.
[   8.362][v][vf] [userdeint] (disabled)
[   8.362][v][vf] [autorotate] 1920x1032 vaapi[nv12] bt.709/bt.709/bt.1886/limited/display SP=1.000000 CL=mpeg2/4/h264
[   8.362][v][vf] [convert] 1920x1032 vaapi[nv12] bt.709/bt.709/bt.1886/limited/display SP=1.000000 CL=mpeg2/4/h264
[   8.362][v][vf] [out] 1920x1032 vaapi[nv12] bt.709/bt.709/bt.1886/limited/display SP=1.000000 CL=mpeg2/4/h264
[   8.479][d][vo/gpu] Resizing texture: 1344x722
[   8.485][i][cplayer] VO: [gpu] 1920x1032 vaapi[nv12]
[   8.485][v][cplayer] VO: Description: Shader-based GPU Renderer
[   8.485][v][vo/gpu] reconfig to 1920x1032 vaapi[nv12] bt.709/bt.709/bt.1886/limited/display SP=1.000000 CL=mpeg2/4/h264
[   8.485][v][vo/gpu/wayland] Reconfiguring!
[   8.485][d][vo/gpu] screen size: 1920x1080
[   8.485][v][vo/gpu] Resize: 1344x722
[   8.485][v][vo/gpu] Window size: 1344x722 (Borders: l=0 t=0 r=0 b=0)
[   8.485][v][vo/gpu] Video source: 1920x1032 (1:1)
[   8.485][v][vo/gpu] Video display: (0, 0) 1920x1032 -> (0, 0) 1343x722
[   8.485][v][vo/gpu] Video scale: 0.699479/0.699612
[   8.485][v][vo/gpu] OSD borders: l=0 t=0 r=1 b=0
[   8.485][v][vo/gpu] Video borders: l=0 t=0 r=1 b=0
[   8.485][v][vo/gpu] Reported display depth: 10
[   8.485][v][vo/gpu] Testing FBO format rgba16f
[   8.485][d][vo/gpu] Resizing texture: 16x16
[   8.485][v][vo/gpu] Using FBO format rgba16f.
[   8.487][v][vo/gpu/wayland] Handling resize on the egl side
[   8.487][v][vo/gpu] Resize: 1344x722
[   8.487][v][vo/gpu] Window size: 1344x722 (Borders: l=0 t=0 r=0 b=0)
[   8.487][v][vo/gpu] Video source: 1920x1032 (1:1)
[   8.487][v][vo/gpu] Video display: (0, 0) 1920x1032 -> (0, 0) 1343x722
[   8.487][v][vo/gpu] Video scale: 0.699479/0.699612
[   8.487][v][vo/gpu] OSD borders: l=0 t=0 r=1 b=0
[   8.487][v][vo/gpu] Video borders: l=0 t=0 r=1 b=0
[   8.487][v][vo/gpu] Reported display depth: 10
[   8.487][d][vo/gpu] Resizing texture: 1920x1032
[   8.493][d][vo/gpu] Resizing texture: 960x516
[   8.494][d][vo/gpu] Resizing texture: 960x1032
[   8.495][d][vo/gpu] Resizing texture: 1920x1032
[   8.495][d][vo/gpu] Resizing texture: 1920x1032
[   8.496][d][vo/gpu] Resizing texture: 1920x722
[   8.496][v][vo/gpu] Dither to 10.
[   9.363][d][cplayer] Run command: cycle, flags=73, args=[name="fullscreen", value="1.000000"]
[   9.364][v][cplayer] Set property: fullscreen -> 1
[   9.364][v][vo/gpu] Resize: 1344x722
[   9.364][v][vo/gpu] Window size: 1344x722 (Borders: l=0 t=0 r=0 b=0)
[   9.364][v][vo/gpu] Video source: 1920x1032 (1:1)
[   9.364][v][vo/gpu] Video display: (0, 0) 1920x1032 -> (0, 0) 1343x722
[   9.364][v][vo/gpu] Video scale: 0.699479/0.699612
[   9.364][v][vo/gpu] OSD borders: l=0 t=0 r=1 b=0
[   9.364][v][vo/gpu] Video borders: l=0 t=0 r=1 b=0
[   9.364][v][vo/gpu] Reported display depth: 10
[   9.364][d][osc] osc_init 
[   9.366][d][cplayer] Run command: change-list, flags=64, args=[name="shared-script-properties", operation="append", value="osc-margins=0.000000,0.000000,0.000000,0.000000"]
[   9.366][v][cplayer] Set property: shared-script-properties -> 1
[   9.404][v][vo/gpu/wayland] Resizing due to xdg from 1344x722 to 1920x1080
[   9.408][v][vo/gpu/wayland] Handling resize on the egl side
[   9.408][v][vo/gpu] Resize: 1920x1080
[   9.408][v][vo/gpu] Window size: 1920x1080 (Borders: l=0 t=0 r=0 b=0)
[   9.408][v][vo/gpu] Video source: 1920x1032 (1:1)
[   9.408][v][vo/gpu] Video display: (0, 0) 1920x1032 -> (0, 24) 1920x1032
[   9.408][v][vo/gpu] Video scale: 1.000000/1.000000
[   9.408][v][vo/gpu] OSD borders: l=0 t=24 r=0 b=24
[   9.408][v][vo/gpu] Video borders: l=0 t=24 r=0 b=24
[   9.408][v][vo/gpu] Reported display depth: 10
[   9.409][d][osc] osc_init 
[   9.410][d][vo/gpu/opengl] vertex shader source:
[   9.410][d][vo/gpu/opengl] [  1] #version 440
[   9.410][d][vo/gpu/opengl] [  2] #define tex1D texture
[   9.410][d][vo/gpu/opengl] [  3] #define tex3D texture
[   9.410][d][vo/gpu/opengl] [  4] #define LUT_POS(x, lut_size) mix(0.5 / (lut_size), 1.0 - 0.5 / (lut_size), (x))
[   9.410][d][vo/gpu/opengl] [  5] in vec2 vertex_position;
[   9.410][d][vo/gpu/opengl] [  6] in vec2 vertex_texcoord0;
[   9.410][d][vo/gpu/opengl] [  7] out vec2 texcoord0;
[   9.410][d][vo/gpu/opengl] [  8] in vec2 vertex_texcoord1;
[   9.410][d][vo/gpu/opengl] [  9] out vec2 texcoord1;
[   9.410][d][vo/gpu/opengl] [ 10] void main() {
[   9.410][d][vo/gpu/opengl] [ 11] gl_Position = vec4(vertex_position, 1.0, 1.0);
[   9.410][d][vo/gpu/opengl] [ 12] texcoord0 = vertex_texcoord0;
[   9.410][d][vo/gpu/opengl] [ 13] texcoord1 = vertex_texcoord1;
[   9.410][d][vo/gpu/opengl] [ 14] }
[   9.410][d][vo/gpu/opengl] fragment shader source:
[   9.410][d][vo/gpu/opengl] [  1] #version 440
[   9.410][d][vo/gpu/opengl] [  2] #define tex1D texture
[   9.410][d][vo/gpu/opengl] [  3] #define tex3D texture
[   9.410][d][vo/gpu/opengl] [  4] #define LUT_POS(x, lut_size) mix(0.5 / (lut_size), 1.0 - 0.5 / (lut_size), (x))
[   9.410][d][vo/gpu/opengl] [  5] out vec4 out_color;
[   9.410][d][vo/gpu/opengl] [  6] in vec2 texcoord0;
[   9.410][d][vo/gpu/opengl] [  7] in vec2 texcoord1;
[   9.410][d][vo/gpu/opengl] [  8] layout(std140, binding=0) uniform UBO {
[   9.410][d][vo/gpu/opengl] [  9] layout(offset=0) mat3 colormatrix;
[   9.410][d][vo/gpu/opengl] [ 10] layout(offset=48) vec3 colormatrix_c;
[   9.410][d][vo/gpu/opengl] [ 11] layout(offset=64) vec2 texture_size0;
[   9.410][d][vo/gpu/opengl] [ 12] layout(offset=80) mat2 texture_rot0;
[   9.410][d][vo/gpu/opengl] [ 13] layout(offset=112) vec2 texture_off0;
[   9.410][d][vo/gpu/opengl] [ 14] layout(offset=120) vec2 pixel_size0;
[   9.410][d][vo/gpu/opengl] [ 15] layout(offset=128) vec2 texture_size1;
[   9.410][d][vo/gpu/opengl] [ 16] layout(offset=144) mat2 texture_rot1;
[   9.410][d][vo/gpu/opengl] [ 17] layout(offset=176) vec2 texture_off1;
[   9.410][d][vo/gpu/opengl] [ 18] layout(offset=184) vec2 pixel_size1;
[   9.410][d][vo/gpu/opengl] [ 19] };
[   9.410][d][vo/gpu/opengl] [ 20] uniform sampler2D texture0;
[   9.410][d][vo/gpu/opengl] [ 21] uniform sampler2D texture1;
[   9.410][d][vo/gpu/opengl] [ 22] void main() {
[   9.410][d][vo/gpu/opengl] [ 23] vec4 color = vec4(0.0, 0.0, 0.0, 1.0);
[   9.410][d][vo/gpu/opengl] [ 24] color.r = 1.000000 * vec4(texture(texture0, texcoord0)).r;
[   9.410][d][vo/gpu/opengl] [ 25] color.gb = 1.000000 * vec4(texture(texture1, texcoord1)).rg;
[   9.410][d][vo/gpu/opengl] [ 26] color = color.rgbr;
[   9.410][d][vo/gpu/opengl] [ 27] color.rgb = mat3(colormatrix) * color.rgb + colormatrix_c;
[   9.410][d][vo/gpu/opengl] [ 28] color.a = 1.0;
[   9.410][d][vo/gpu/opengl] [ 29] // scaler pre-conversion
[   9.410][d][vo/gpu/opengl] [ 30] // main scaling
[   9.410][d][vo/gpu/opengl] [ 31] out_color = color;
[   9.410][d][vo/gpu/opengl] [ 32] }
[   9.411][d][vo/gpu/opengl] shader link log (status=1): 
[   9.412][d][vo/gpu/opengl] vertex shader source:
[   9.412][d][vo/gpu/opengl] [  1] #version 440
[   9.412][d][vo/gpu/opengl] [  2] #define tex1D texture
[   9.412][d][vo/gpu/opengl] [  3] #define tex3D texture
[   9.412][d][vo/gpu/opengl] [  4] #define LUT_POS(x, lut_size) mix(0.5 / (lut_size), 1.0 - 0.5 / (lut_size), (x))
[   9.412][d][vo/gpu/opengl] [  5] in vec2 vertex_position;
[   9.412][d][vo/gpu/opengl] [  6] in vec2 vertex_texcoord0;
[   9.412][d][vo/gpu/opengl] [  7] out vec2 texcoord0;
[   9.412][d][vo/gpu/opengl] [  8] void main() {
[   9.412][d][vo/gpu/opengl] [  9] gl_Position = vec4(vertex_position, 1.0, 1.0);
[   9.412][d][vo/gpu/opengl] [ 10] texcoord0 = vertex_texcoord0;
[   9.412][d][vo/gpu/opengl] [ 11] }
[   9.412][d][vo/gpu/opengl] fragment shader source:
[   9.412][d][vo/gpu/opengl] [  1] #version 440
[   9.412][d][vo/gpu/opengl] [  2] #define tex1D texture
[   9.412][d][vo/gpu/opengl] [  3] #define tex3D texture
[   9.412][d][vo/gpu/opengl] [  4] #define LUT_POS(x, lut_size) mix(0.5 / (lut_size), 1.0 - 0.5 / (lut_size), (x))
[   9.412][d][vo/gpu/opengl] [  5] out vec4 out_color;
[   9.412][d][vo/gpu/opengl] [  6] in vec2 texcoord0;
[   9.412][d][vo/gpu/opengl] [  7] layout(std140, binding=0) uniform UBO {
[   9.412][d][vo/gpu/opengl] [  8] layout(offset=0) vec3 src_luma;
[   9.412][d][vo/gpu/opengl] [  9] layout(offset=16) vec3 dst_luma;
[   9.412][d][vo/gpu/opengl] [ 10] layout(offset=32) vec2 texture_size0;
[   9.412][d][vo/gpu/opengl] [ 11] layout(offset=48) mat2 texture_rot0;
[   9.412][d][vo/gpu/opengl] [ 12] layout(offset=80) vec2 texture_off0;
[   9.412][d][vo/gpu/opengl] [ 13] layout(offset=88) vec2 pixel_size0;
[   9.412][d][vo/gpu/opengl] [ 14] };
[   9.412][d][vo/gpu/opengl] [ 15] uniform sampler2D dither;
[   9.412][d][vo/gpu/opengl] [ 16] uniform sampler2D texture0;
[   9.412][d][vo/gpu/opengl] [ 17] void main() {
[   9.412][d][vo/gpu/opengl] [ 18] vec4 color = vec4(0.0, 0.0, 0.0, 1.0);
[   9.412][d][vo/gpu/opengl] [ 19] #undef tex
[   9.412][d][vo/gpu/opengl] [ 20] #undef texmap
[   9.412][d][vo/gpu/opengl] [ 21] #define tex texture0
[   9.412][d][vo/gpu/opengl] [ 22] #define texmap texmap0
[   9.412][d][vo/gpu/opengl] [ 23] vec2 pos = texcoord0;
[   9.412][d][vo/gpu/opengl] [ 24] vec2 size = texture_size0;
[   9.412][d][vo/gpu/opengl] [ 25] vec2 pt = pixel_size0;
[   9.412][d][vo/gpu/opengl] [ 26] color = texture(tex, pos);
[   9.412][d][vo/gpu/opengl] [ 27] color *= 1.000000;
[   9.412][d][vo/gpu/opengl] [ 28] color.a = 1.000000;
[   9.412][d][vo/gpu/opengl] [ 29] // scaler post-conversion
[   9.412][d][vo/gpu/opengl] [ 30] // color mapping
[   9.412][d][vo/gpu/opengl] [ 31] color.rgb *= vec3(1.000000);
[   9.412][d][vo/gpu/opengl] [ 32] color.rgb *= vec3(1.000000);
[   9.412][d][vo/gpu/opengl] [ 33] // dithering
[   9.412][d][vo/gpu/opengl] [ 34] vec2 dither_pos = gl_FragCoord.xy * 1.0/64.0;
[   9.412][d][vo/gpu/opengl] [ 35] float dither_value = texture(dither, dither_pos).r;
[   9.412][d][vo/gpu/opengl] [ 36] color = floor(color * 1023.0 + dither_value + 0.5 / 4096.0) * 1.0/1023.0;
[   9.412][d][vo/gpu/opengl] [ 37] out_color = color;
[   9.412][d][vo/gpu/opengl] [ 38] }
[   9.413][d][vo/gpu/opengl] shader link log (status=1): 
[   9.416][d][cplayer] Run command: change-list, flags=64, args=[name="shared-script-properties", operation="append", value="osc-margins=0.000000,0.000000,0.000000,0.000000"]
[   9.416][v][cplayer] Set property: shared-script-properties -> 1
[   9.447][v][vo/gpu/wayland] Surface entered output Dell Inc. DELL P2317H (0x2e), scale = 1
[6290.855][v][mkv] EOF reached.
[6291.879][v][af] filter input EOF
[6291.879][v][af] filter output EOF
[6291.879][v][cplayer] audio filter EOF
[6291.879][v][cplayer] audio draining
[6291.879][v][cplayer] audio EOF reached
[6292.065][v][vf] filter input EOF
[6292.065][v][vf] filter output EOF
[6292.104][v][cplayer] EOF code: 1  
[6292.104][d][ad] Uninit decoder.
[6292.104][v][vo/gpu/wayland] Disabling the idle inhibitor
[6292.105][d][vd] Uninit decoder.
[6292.106][d][cplayer] Terminating demuxers...
[6292.106][d][cplayer] Done terminating demuxers.
[6292.107][v][cplayer] finished playback, success (reason 0)
[6292.108][i][cplayer] 
[6292.108][i][cplayer] Exiting... (End of file)
[6292.108][d][cplayer] Run command: change-list, flags=64, args=[name="shared-script-properties", operation="remove", value="osc-margins"]
[6292.108][v][cplayer] Set property: shared-script-properties -> 1
[6292.111][d][ytdl_hook] Exiting...
[6292.112][d][console] Exiting...
[6292.113][d][stats] Exiting...
[6292.114][d][osc] Exiting...
[6292.115][v][cplayer] draining left over audio
[6292.135][v][ao/pulse] audio end or underrun
[6292.221][v][ao/pulse] audio end or underrun
[6292.229][d][vo/gpu] flushing shader cache
[6292.249][v][vo/gpu/wayland] Deregistering output Sony SONY TV (0x2f)
[6292.249][v][vo/gpu/wayland] Deregistering output Dell Inc. DELL P2317H (0x2e)
[6292.249][v][vo/gpu/wayland] Deregistering output Dell Inc. DELL P2317H (0x2d)
